{"cells":[{"cell_type":"markdown","id":"562b4b26-3ad4-427d-98db-ba4616d269be","metadata":{"id":"562b4b26-3ad4-427d-98db-ba4616d269be"},"source":["## Step 1: Prepare the data"]},{"cell_type":"code","execution_count":null,"id":"f7b6df36-6f52-4662-8a4d-3052a018a61e","metadata":{"id":"f7b6df36-6f52-4662-8a4d-3052a018a61e"},"outputs":[],"source":["import numpy as np\n","import pandas as pd\n","import matplotlib.pyplot as plt\n","import joblib\n","import seaborn as sns\n","import warnings\n","from sklearn.model_selection import train_test_split\n","from sklearn.model_selection import cross_val_score\n","from sklearn.model_selection import GridSearchCV\n","from sklearn.model_selection import cross_val_predict\n","from sklearn.metrics import mean_squared_error\n","from sklearn.metrics import r2_score\n","from sklearn.metrics import mean_absolute_error\n","from sklearn.preprocessing import StandardScaler\n","from sklearn.preprocessing import LabelEncoder\n","from sklearn.ensemble import RandomForestRegressor\n","from sklearn.impute import SimpleImputer\n","from sklearn.tree import DecisionTreeRegressor\n","from sklearn.neighbors import KNeighborsRegressor\n","from joblib import dump, load"]},{"cell_type":"code","execution_count":null,"id":"70f711c5-574d-4f15-a2ad-10fef44010d6","metadata":{"id":"70f711c5-574d-4f15-a2ad-10fef44010d6"},"outputs":[],"source":["# Read the dataset\n","data = pd.read_csv('SalaryData.csv')"]},{"cell_type":"code","execution_count":null,"id":"ed49cb88-1e3e-420e-a92b-6ffb73d66348","metadata":{"id":"ed49cb88-1e3e-420e-a92b-6ffb73d66348","outputId":"5d4c6037-a3a9-42b7-e5e2-a80da806df71","colab":{"base_uri":"https://localhost:8080/","height":206},"executionInfo":{"status":"ok","timestamp":1726378795644,"user_tz":-480,"elapsed":31,"user":{"displayName":"SHI YUN GAN","userId":"03889907775066405608"}}},"outputs":[{"output_type":"execute_result","data":{"text/plain":["    Age  Gender Education Level          Job Title  Years of Experience  \\\n","0  32.0    Male      Bachelor's  Software Engineer                  5.0   \n","1  28.0  Female        Master's       Data Analyst                  3.0   \n","2  45.0    Male             PhD     Senior Manager                 15.0   \n","3  36.0  Female      Bachelor's    Sales Associate                  7.0   \n","4  52.0    Male        Master's           Director                 20.0   \n","\n","     Salary  \n","0   90000.0  \n","1   65000.0  \n","2  150000.0  \n","3   60000.0  \n","4  200000.0  "],"text/html":["\n","  <div id=\"df-657a5ab5-0d3c-4be1-a33a-0087afe599b3\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Age</th>\n","      <th>Gender</th>\n","      <th>Education Level</th>\n","      <th>Job Title</th>\n","      <th>Years of Experience</th>\n","      <th>Salary</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>32.0</td>\n","      <td>Male</td>\n","      <td>Bachelor's</td>\n","      <td>Software Engineer</td>\n","      <td>5.0</td>\n","      <td>90000.0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>28.0</td>\n","      <td>Female</td>\n","      <td>Master's</td>\n","      <td>Data Analyst</td>\n","      <td>3.0</td>\n","      <td>65000.0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>45.0</td>\n","      <td>Male</td>\n","      <td>PhD</td>\n","      <td>Senior Manager</td>\n","      <td>15.0</td>\n","      <td>150000.0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>36.0</td>\n","      <td>Female</td>\n","      <td>Bachelor's</td>\n","      <td>Sales Associate</td>\n","      <td>7.0</td>\n","      <td>60000.0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>52.0</td>\n","      <td>Male</td>\n","      <td>Master's</td>\n","      <td>Director</td>\n","      <td>20.0</td>\n","      <td>200000.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-657a5ab5-0d3c-4be1-a33a-0087afe599b3')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-657a5ab5-0d3c-4be1-a33a-0087afe599b3 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-657a5ab5-0d3c-4be1-a33a-0087afe599b3');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-f89240b8-86b5-4396-ac98-e0714d9931fc\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-f89240b8-86b5-4396-ac98-e0714d9931fc')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-f89240b8-86b5-4396-ac98-e0714d9931fc button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"data","summary":"{\n  \"name\": \"data\",\n  \"rows\": 375,\n  \"fields\": [\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 7.069072938567494,\n        \"min\": 23.0,\n        \"max\": 53.0,\n        \"num_unique_values\": 31,\n        \"samples\": [\n          46.0,\n          33.0,\n          37.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Gender\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Female\",\n          \"Male\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Education Level\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Bachelor's\",\n          \"Master's\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Job Title\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 174,\n        \"samples\": [\n          \"Junior Advertising Coordinator\",\n          \"Junior Product Manager\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Years of Experience\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6.557007136414237,\n        \"min\": 0.0,\n        \"max\": 25.0,\n        \"num_unique_values\": 28,\n        \"samples\": [\n          10.0,\n          24.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Salary\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 48240.013481882655,\n        \"min\": 350.0,\n        \"max\": 250000.0,\n        \"num_unique_values\": 36,\n        \"samples\": [\n          350.0,\n          40000.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":3}],"source":["data.head()"]},{"cell_type":"code","execution_count":null,"id":"ae1763ce-ca25-413c-ab3f-3945db469f32","metadata":{"id":"ae1763ce-ca25-413c-ab3f-3945db469f32","outputId":"ec0ab6be-9041-425e-e360-a1efddc73fe1","colab":{"base_uri":"https://localhost:8080/","height":507},"executionInfo":{"status":"ok","timestamp":1726378795645,"user_tz":-480,"elapsed":28,"user":{"displayName":"SHI YUN GAN","userId":"03889907775066405608"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 375 entries, 0 to 374\n","Data columns (total 6 columns):\n"," #   Column               Non-Null Count  Dtype  \n","---  ------               --------------  -----  \n"," 0   Age                  373 non-null    float64\n"," 1   Gender               373 non-null    object \n"," 2   Education Level      373 non-null    object \n"," 3   Job Title            373 non-null    object \n"," 4   Years of Experience  373 non-null    float64\n"," 5   Salary               373 non-null    float64\n","dtypes: float64(3), object(3)\n","memory usage: 17.7+ KB\n"]},{"output_type":"execute_result","data":{"text/plain":["Age                    2\n","Gender                 2\n","Education Level        2\n","Job Title              2\n","Years of Experience    2\n","Salary                 2\n","dtype: int64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>0</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>Age</th>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>Gender</th>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>Education Level</th>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>Job Title</th>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>Years of Experience</th>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>Salary</th>\n","      <td>2</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> int64</label>"]},"metadata":{},"execution_count":4}],"source":["data.info()\n","data.isnull().sum()"]},{"cell_type":"code","execution_count":null,"id":"f9c34539-ecb6-47de-93f4-93bd07207df8","metadata":{"id":"f9c34539-ecb6-47de-93f4-93bd07207df8","outputId":"99c2e3ad-e8de-4a29-d412-58efc007addc","colab":{"base_uri":"https://localhost:8080/","height":300},"executionInfo":{"status":"ok","timestamp":1726378795645,"user_tz":-480,"elapsed":23,"user":{"displayName":"SHI YUN GAN","userId":"03889907775066405608"}}},"outputs":[{"output_type":"execute_result","data":{"text/plain":["              Age  Years of Experience         Salary\n","count  373.000000           373.000000     373.000000\n","mean    37.431635            10.030831  100577.345845\n","std      7.069073             6.557007   48240.013482\n","min     23.000000             0.000000     350.000000\n","25%     31.000000             4.000000   55000.000000\n","50%     36.000000             9.000000   95000.000000\n","75%     44.000000            15.000000  140000.000000\n","max     53.000000            25.000000  250000.000000"],"text/html":["\n","  <div id=\"df-1da00b18-92b6-4e75-aa1a-191319d29ee1\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Age</th>\n","      <th>Years of Experience</th>\n","      <th>Salary</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>373.000000</td>\n","      <td>373.000000</td>\n","      <td>373.000000</td>\n","    </tr>\n","    <tr>\n","      <th>mean</th>\n","      <td>37.431635</td>\n","      <td>10.030831</td>\n","      <td>100577.345845</td>\n","    </tr>\n","    <tr>\n","      <th>std</th>\n","      <td>7.069073</td>\n","      <td>6.557007</td>\n","      <td>48240.013482</td>\n","    </tr>\n","    <tr>\n","      <th>min</th>\n","      <td>23.000000</td>\n","      <td>0.000000</td>\n","      <td>350.000000</td>\n","    </tr>\n","    <tr>\n","      <th>25%</th>\n","      <td>31.000000</td>\n","      <td>4.000000</td>\n","      <td>55000.000000</td>\n","    </tr>\n","    <tr>\n","      <th>50%</th>\n","      <td>36.000000</td>\n","      <td>9.000000</td>\n","      <td>95000.000000</td>\n","    </tr>\n","    <tr>\n","      <th>75%</th>\n","      <td>44.000000</td>\n","      <td>15.000000</td>\n","      <td>140000.000000</td>\n","    </tr>\n","    <tr>\n","      <th>max</th>\n","      <td>53.000000</td>\n","      <td>25.000000</td>\n","      <td>250000.000000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-1da00b18-92b6-4e75-aa1a-191319d29ee1')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-1da00b18-92b6-4e75-aa1a-191319d29ee1 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-1da00b18-92b6-4e75-aa1a-191319d29ee1');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-a177f8ff-ed74-4821-9b89-aaf2db531a39\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-a177f8ff-ed74-4821-9b89-aaf2db531a39')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-a177f8ff-ed74-4821-9b89-aaf2db531a39 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"data\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 120.96839069068491,\n        \"min\": 7.069072938567494,\n        \"max\": 373.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          37.43163538873995,\n          36.0,\n          373.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Years of Experience\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 128.58244303384768,\n        \"min\": 0.0,\n        \"max\": 373.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          10.03083109919571,\n          9.0,\n          373.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Salary\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 82080.03466509456,\n        \"min\": 350.0,\n        \"max\": 250000.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          100577.34584450402,\n          95000.0,\n          373.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":5}],"source":["data.describe()"]},{"cell_type":"code","execution_count":null,"id":"f5a700c3-fc18-4fcd-bf0c-870a6f573d4e","metadata":{"id":"f5a700c3-fc18-4fcd-bf0c-870a6f573d4e","outputId":"68a01933-a631-49a4-c242-1c29cc52284a","colab":{"base_uri":"https://localhost:8080/","height":441},"executionInfo":{"status":"ok","timestamp":1726378797162,"user_tz":-480,"elapsed":1537,"user":{"displayName":"SHI YUN GAN","userId":"03889907775066405608"}}},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 2000x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["#the number of occurrences of every Age\n","plt.figure(figsize=(20, 6))\n","sns.countplot(data=data,x='Age')\n","plt.show()"]},{"cell_type":"code","execution_count":null,"id":"ae938dd0-8543-439f-90fa-2da8dd2d48ad","metadata":{"id":"ae938dd0-8543-439f-90fa-2da8dd2d48ad","outputId":"80a616cf-e89e-43a2-e5de-582f4b1e0bb5","colab":{"base_uri":"https://localhost:8080/","height":439},"executionInfo":{"status":"ok","timestamp":1726378799945,"user_tz":-480,"elapsed":2787,"user":{"displayName":"SHI YUN GAN","userId":"03889907775066405608"}}},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 2000x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["#the number of occurrences of every Years of Experience\n","plt.figure(figsize=(20, 6))\n","sns.countplot(data=data,x='Years of Experience')\n","plt.show()"]},{"cell_type":"code","execution_count":null,"id":"2a7189e3-a8c7-4304-a207-9132a3540c0a","metadata":{"id":"2a7189e3-a8c7-4304-a207-9132a3540c0a","outputId":"2d155894-e567-4d7f-9710-2364ea6675c7","colab":{"base_uri":"https://localhost:8080/","height":448},"executionInfo":{"status":"ok","timestamp":1726378804240,"user_tz":-480,"elapsed":4304,"user":{"displayName":"SHI YUN GAN","userId":"03889907775066405608"}}},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 2000x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["#average salary for particular age\n","plt.figure(figsize=(20, 6))\n","\n","sns.barplot(x='Age', y='Salary', data=data)\n","\n","plt.title('Salary Distribution by Age')\n","plt.xlabel('Age')\n","plt.ylabel('Salary')\n","plt.show()"]},{"cell_type":"code","execution_count":null,"id":"f30c2936-d6de-4efb-946c-da101081230c","metadata":{"id":"f30c2936-d6de-4efb-946c-da101081230c","outputId":"a5e5a52e-ffcb-4e37-fd4f-83d7de4ec0df","colab":{"base_uri":"https://localhost:8080/","height":448},"executionInfo":{"status":"ok","timestamp":1726378807351,"user_tz":-480,"elapsed":3118,"user":{"displayName":"SHI YUN GAN","userId":"03889907775066405608"}}},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 2000x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["#average salary for particular year of experience\n","plt.figure(figsize=(20, 6))\n","\n","sns.barplot(x='Years of Experience', y='Salary', data=data)\n","\n","plt.title('Salary Distribution by Years of Experience')\n","plt.xlabel('Years of Experience')\n","plt.ylabel('Salary')\n","plt.show()"]},{"cell_type":"code","execution_count":null,"id":"e2336e3c-956d-48f7-8801-8a55ae824b6b","metadata":{"id":"e2336e3c-956d-48f7-8801-8a55ae824b6b","outputId":"10377c45-cf8d-4a7d-ff35-8f768245e262","colab":{"base_uri":"https://localhost:8080/","height":448},"executionInfo":{"status":"ok","timestamp":1726378808797,"user_tz":-480,"elapsed":1485,"user":{"displayName":"SHI YUN GAN","userId":"03889907775066405608"}}},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 2000x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["#displays the median (the central line inside the box) of the salary for each age group\n","plt.figure(figsize=(20, 6))\n","\n","sns.boxplot(x='Age', y='Salary', data=data)\n","\n","plt.title('Salary Accourding To Age')\n","plt.xlabel('Age')\n","plt.ylabel('Salary')\n","plt.show()"]},{"cell_type":"code","execution_count":null,"id":"243b827b-eafc-4b20-bc1a-a53cce671a68","metadata":{"id":"243b827b-eafc-4b20-bc1a-a53cce671a68","outputId":"49070ec9-5c37-40b5-9d51-06824a6e4fd6","colab":{"base_uri":"https://localhost:8080/","height":448},"executionInfo":{"status":"ok","timestamp":1726378809928,"user_tz":-480,"elapsed":1136,"user":{"displayName":"SHI YUN GAN","userId":"03889907775066405608"}}},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 2000x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["#displays the median (the central line inside the box) of the salary for each year of experience group\n","plt.figure(figsize=(20, 6))\n","\n","sns.boxplot(x='Years of Experience', y='Salary', data=data)\n","\n","plt.title('Salary Accourding To Years of Experience')\n","plt.xlabel('Years of Experience')\n","plt.ylabel('Salary')\n","plt.show()"]},{"cell_type":"markdown","id":"7dd79157-eca0-4664-8bfb-4b11d9189d61","metadata":{"id":"7dd79157-eca0-4664-8bfb-4b11d9189d61"},"source":["### Data Preprocessing"]},{"cell_type":"code","execution_count":null,"id":"65250118-9f0a-4fae-8c04-f69f3738c62e","metadata":{"id":"65250118-9f0a-4fae-8c04-f69f3738c62e","outputId":"1395b8ec-e8f6-4f4c-a186-55c5114a9c6b","colab":{"base_uri":"https://localhost:8080/","height":272},"executionInfo":{"status":"ok","timestamp":1726378809929,"user_tz":-480,"elapsed":75,"user":{"displayName":"SHI YUN GAN","userId":"03889907775066405608"}}},"outputs":[{"output_type":"execute_result","data":{"text/plain":["Age                    0\n","Gender                 0\n","Education Level        0\n","Job Title              0\n","Years of Experience    0\n","Salary                 0\n","dtype: int64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>0</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>Age</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>Gender</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>Education Level</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>Job Title</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>Years of Experience</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>Salary</th>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> int64</label>"]},"metadata":{},"execution_count":12}],"source":["# Impute missing numeric values (mean) and drop rows with missing categorical values\n","numeric_features = ['Age', 'Years of Experience']\n","categorical_features = ['Gender', 'Education Level', 'Job Title']\n","\n","# Impute missing numeric values with mean\n","imputer = SimpleImputer(strategy='mean')\n","data[numeric_features] = imputer.fit_transform(data[numeric_features])\n","\n","# Drop rows with missing categorical values (as the dataset is small)\n","data.dropna(subset=categorical_features, inplace=True)\n","\n","# Drop rows where the target 'Salary' is missing\n","data.dropna(subset=['Salary'], inplace=True)\n","data.isnull().sum()"]},{"cell_type":"code","execution_count":null,"id":"4b82a8d1-f506-4a39-bed4-4b7fc21a428d","metadata":{"id":"4b82a8d1-f506-4a39-bed4-4b7fc21a428d","outputId":"9c5f0b04-2ed2-46f5-e515-752145ea541a","colab":{"base_uri":"https://localhost:8080/","height":423},"executionInfo":{"status":"ok","timestamp":1726378809930,"user_tz":-480,"elapsed":73,"user":{"displayName":"SHI YUN GAN","userId":"03889907775066405608"}}},"outputs":[{"output_type":"execute_result","data":{"text/plain":["      Age  Gender Education Level                      Job Title  \\\n","0    32.0    Male      Bachelor's              Software Engineer   \n","1    28.0  Female        Master's                   Data Analyst   \n","2    45.0    Male             PhD                 Senior Manager   \n","3    36.0  Female      Bachelor's                Sales Associate   \n","4    52.0    Male        Master's                       Director   \n","..    ...     ...             ...                            ...   \n","370  35.0  Female      Bachelor's       Senior Marketing Analyst   \n","371  43.0    Male        Master's         Director of Operations   \n","372  29.0  Female      Bachelor's         Junior Project Manager   \n","373  34.0    Male      Bachelor's  Senior Operations Coordinator   \n","374  44.0  Female             PhD        Senior Business Analyst   \n","\n","     Years of Experience  \n","0                    5.0  \n","1                    3.0  \n","2                   15.0  \n","3                    7.0  \n","4                   20.0  \n","..                   ...  \n","370                  8.0  \n","371                 19.0  \n","372                  2.0  \n","373                  7.0  \n","374                 15.0  \n","\n","[373 rows x 5 columns]"],"text/html":["\n","  <div id=\"df-934557ca-cfe7-4b3a-b20f-6ae417cb63e8\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Age</th>\n","      <th>Gender</th>\n","      <th>Education Level</th>\n","      <th>Job Title</th>\n","      <th>Years of Experience</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>32.0</td>\n","      <td>Male</td>\n","      <td>Bachelor's</td>\n","      <td>Software Engineer</td>\n","      <td>5.0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>28.0</td>\n","      <td>Female</td>\n","      <td>Master's</td>\n","      <td>Data Analyst</td>\n","      <td>3.0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>45.0</td>\n","      <td>Male</td>\n","      <td>PhD</td>\n","      <td>Senior Manager</td>\n","      <td>15.0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>36.0</td>\n","      <td>Female</td>\n","      <td>Bachelor's</td>\n","      <td>Sales Associate</td>\n","      <td>7.0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>52.0</td>\n","      <td>Male</td>\n","      <td>Master's</td>\n","      <td>Director</td>\n","      <td>20.0</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>370</th>\n","      <td>35.0</td>\n","      <td>Female</td>\n","      <td>Bachelor's</td>\n","      <td>Senior Marketing Analyst</td>\n","      <td>8.0</td>\n","    </tr>\n","    <tr>\n","      <th>371</th>\n","      <td>43.0</td>\n","      <td>Male</td>\n","      <td>Master's</td>\n","      <td>Director of Operations</td>\n","      <td>19.0</td>\n","    </tr>\n","    <tr>\n","      <th>372</th>\n","      <td>29.0</td>\n","      <td>Female</td>\n","      <td>Bachelor's</td>\n","      <td>Junior Project Manager</td>\n","      <td>2.0</td>\n","    </tr>\n","    <tr>\n","      <th>373</th>\n","      <td>34.0</td>\n","      <td>Male</td>\n","      <td>Bachelor's</td>\n","      <td>Senior Operations Coordinator</td>\n","      <td>7.0</td>\n","    </tr>\n","    <tr>\n","      <th>374</th>\n","      <td>44.0</td>\n","      <td>Female</td>\n","      <td>PhD</td>\n","      <td>Senior Business Analyst</td>\n","      <td>15.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>373 rows × 5 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-934557ca-cfe7-4b3a-b20f-6ae417cb63e8')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-934557ca-cfe7-4b3a-b20f-6ae417cb63e8 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-934557ca-cfe7-4b3a-b20f-6ae417cb63e8');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-36ffab9a-0755-468c-94e3-e9c7d01657f1\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-36ffab9a-0755-468c-94e3-e9c7d01657f1')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-36ffab9a-0755-468c-94e3-e9c7d01657f1 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_2c0c84b5-469f-473e-b6d1-9936c8165e9d\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('X')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_2c0c84b5-469f-473e-b6d1-9936c8165e9d button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('X');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"X","summary":"{\n  \"name\": \"X\",\n  \"rows\": 373,\n  \"fields\": [\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 7.069072938567495,\n        \"min\": 23.0,\n        \"max\": 53.0,\n        \"num_unique_values\": 31,\n        \"samples\": [\n          46.0,\n          33.0,\n          37.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Gender\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Female\",\n          \"Male\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Education Level\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Bachelor's\",\n          \"Master's\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Job Title\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 174,\n        \"samples\": [\n          \"Junior Advertising Coordinator\",\n          \"Junior Product Manager\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Years of Experience\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6.557007136414237,\n        \"min\": 0.0,\n        \"max\": 25.0,\n        \"num_unique_values\": 28,\n        \"samples\": [\n          10.0,\n          24.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":13}],"source":["#drop salary in X, and put it as y\n","X = data.drop('Salary', axis=1)\n","y = data['Salary']\n","X"]},{"cell_type":"code","execution_count":null,"id":"8d6bb20d-0413-4727-bb1f-12b112696aa2","metadata":{"id":"8d6bb20d-0413-4727-bb1f-12b112696aa2","outputId":"2519f57a-509f-42c3-93e0-45fe0d2cb41b","colab":{"base_uri":"https://localhost:8080/","height":423},"executionInfo":{"status":"ok","timestamp":1726378809940,"user_tz":-480,"elapsed":80,"user":{"displayName":"SHI YUN GAN","userId":"03889907775066405608"}}},"outputs":[{"output_type":"execute_result","data":{"text/plain":["          Age  Gender  Education Level  Job Title  Years of Experience\n","0   -0.769398       1                0        159            -0.768276\n","1   -1.336003       0                1         17            -1.073702\n","2    1.072068       1                2        130             0.758859\n","3   -0.202793       0                0        101            -0.462849\n","4    2.063627       1                1         22             1.522426\n","..        ...     ...              ...        ...                  ...\n","370 -0.344444       0                0        131            -0.310135\n","371  0.788766       1                1         30             1.369713\n","372 -1.194352       0                0         70            -1.226416\n","373 -0.486096       1                0        137            -0.462849\n","374  0.930417       0                2        110             0.758859\n","\n","[373 rows x 5 columns]"],"text/html":["\n","  <div id=\"df-635789b6-26d8-4d5d-aac6-db59bc21afeb\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Age</th>\n","      <th>Gender</th>\n","      <th>Education Level</th>\n","      <th>Job Title</th>\n","      <th>Years of Experience</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>-0.769398</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>159</td>\n","      <td>-0.768276</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>-1.336003</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>17</td>\n","      <td>-1.073702</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1.072068</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>130</td>\n","      <td>0.758859</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>-0.202793</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>101</td>\n","      <td>-0.462849</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>2.063627</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>22</td>\n","      <td>1.522426</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>370</th>\n","      <td>-0.344444</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>131</td>\n","      <td>-0.310135</td>\n","    </tr>\n","    <tr>\n","      <th>371</th>\n","      <td>0.788766</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>30</td>\n","      <td>1.369713</td>\n","    </tr>\n","    <tr>\n","      <th>372</th>\n","      <td>-1.194352</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>70</td>\n","      <td>-1.226416</td>\n","    </tr>\n","    <tr>\n","      <th>373</th>\n","      <td>-0.486096</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>137</td>\n","      <td>-0.462849</td>\n","    </tr>\n","    <tr>\n","      <th>374</th>\n","      <td>0.930417</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>110</td>\n","      <td>0.758859</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>373 rows × 5 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-635789b6-26d8-4d5d-aac6-db59bc21afeb')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-635789b6-26d8-4d5d-aac6-db59bc21afeb button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-635789b6-26d8-4d5d-aac6-db59bc21afeb');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-dca6c73f-c78b-43bf-a193-edca6e99602d\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-dca6c73f-c78b-43bf-a193-edca6e99602d')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-dca6c73f-c78b-43bf-a193-edca6e99602d button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_c81fa881-7317-43e8-a3e6-c8758b0289c3\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('X')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_c81fa881-7317-43e8-a3e6-c8758b0289c3 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('X');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"X","summary":"{\n  \"name\": \"X\",\n  \"rows\": 373,\n  \"fields\": [\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0013431839499436,\n        \"min\": -2.0442595309667233,\n        \"max\": 2.205278672919145,\n        \"num_unique_values\": 31,\n        \"samples\": [\n          1.213719758679109,\n          -0.6277467963381004,\n          -0.06114170248665133\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Gender\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Education Level\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 2,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Job Title\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 46,\n        \"min\": 0,\n        \"max\": 173,\n        \"num_unique_values\": 174,\n        \"samples\": [\n          48,\n          69\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Years of Experience\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0013431839499436,\n        \"min\": -1.5318428273094074,\n        \"max\": 2.285993432121362,\n        \"num_unique_values\": 28,\n        \"samples\": [\n          -0.004708323537099594,\n          2.1332799817441312\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":14}],"source":["#encoding categorical variables and standardizing numerical variables\n","label_encoders = {}\n","scaler_columns={}\n","\n","# Encode categorical variables using Label Encoding\n","for column in X.select_dtypes(include=['object']).columns:\n","    le = LabelEncoder()\n","    X[column] = le.fit_transform(X[column])\n","    label_encoders[column] = le\n","\n","# standardize numerical variable\n","for column in X.select_dtypes(include=['float64']).columns:\n","    scaler = StandardScaler()\n","    X[column] = scaler.fit_transform(X[[column]])\n","    scaler_columns[column] = scaler\n","X"]},{"cell_type":"code","execution_count":null,"id":"85bbc36b-4f3b-4d1f-a0d6-b132428b127a","metadata":{"id":"85bbc36b-4f3b-4d1f-a0d6-b132428b127a","outputId":"587d152f-4075-49d2-c724-4f21cc7f1b74","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1726378809941,"user_tz":-480,"elapsed":78,"user":{"displayName":"SHI YUN GAN","userId":"03889907775066405608"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["Encoding for column: Gender\n","Count for column: 2 \n","\n","Encoding for column: Education Level\n","Count for column: 3 \n","\n","Encoding for column: Job Title\n","Count for column: 174 \n","\n"]}],"source":["# Print the encoding mapping for each categorical column\n","count = 0\n","for column, le in label_encoders.items():\n","    count = 0\n","    print(f\"Encoding for column: {column}\")\n","    for idx, class_ in enumerate(le.classes_):\n","        # print(f\"  {class_}: {idx}\")\n","        count+=1\n","    print(f\"Count for column: {count} \\n\")"]},{"cell_type":"markdown","id":"88b4c8c5-8a12-4ae7-99a5-abcacd7c7d3a","metadata":{"id":"88b4c8c5-8a12-4ae7-99a5-abcacd7c7d3a"},"source":["## Random Forest"]},{"cell_type":"markdown","id":"4db4e92e-9208-411c-925e-99eebf3eb1df","metadata":{"id":"4db4e92e-9208-411c-925e-99eebf3eb1df"},"source":["### Step 2 & 3 : Feature Extraction and Split the data (into training and testing set)"]},{"cell_type":"code","execution_count":null,"id":"a1319ce0-7f71-4b43-8753-780603497614","metadata":{"id":"a1319ce0-7f71-4b43-8753-780603497614","outputId":"c77103d2-5983-40f0-b25c-340b13570c97","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1726370849498,"user_tz":-480,"elapsed":493,"user":{"displayName":"SHI YUN GAN","userId":"03889907775066405608"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["(298, 5)\n","(298,)\n","(75, 5)\n","(75,)\n","          Age  Gender  Education Level  Job Title  Years of Experience\n","329  1.497022       1                1         29             1.675140\n","33   0.222161       0                0         84            -0.004708\n","15   0.930417       1                0         89             0.911572\n","316 -0.486096       0                1        117            -0.615562\n","57   0.788766       1                2        116             1.064286\n","..        ...     ...              ...        ...                  ...\n","94  -0.627747       1                0          3            -0.462849\n","196  0.505463       0                0        132             0.148005\n","313 -0.627747       1                0         49            -0.920989\n","294  1.072068       0                1        122             0.606145\n","349 -0.202793       1                0        111            -0.310135\n","\n","[75 rows x 5 columns]\n","329    180000.0\n","33      65000.0\n","15     125000.0\n","316     80000.0\n","57     140000.0\n","         ...   \n","94      75000.0\n","196     90000.0\n","313     60000.0\n","294    140000.0\n","349    110000.0\n","Name: Salary, Length: 75, dtype: float64\n"]}],"source":["# Split the data into training and testing sets\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n","print(X_train.shape)           #see all data shape (row, column), column needs to be same in train/test\n","print(y_train.shape)\n","print(X_test.shape)\n","print(y_test.shape)\n","print(X_test) #these data will be used to test the model\n","print(y_test)"]},{"cell_type":"markdown","id":"4c6ac730-5c3e-4164-911b-90904ea044ab","metadata":{"id":"4c6ac730-5c3e-4164-911b-90904ea044ab"},"source":["### Step 4: Fit model and predict outcomes [Code]"]},{"cell_type":"code","execution_count":null,"id":"dbc1e0c9-e629-4323-b089-5cc63996909f","metadata":{"id":"dbc1e0c9-e629-4323-b089-5cc63996909f","outputId":"910e4d6b-e514-4456-c100-b67117432668","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1726370851955,"user_tz":-480,"elapsed":416,"user":{"displayName":"SHI YUN GAN","userId":"03889907775066405608"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["Mean Absolute Error (MAE) Percentage: 3.0447830199595654 %\n","Root Mean Squared Error (RMSE): 5244.63781321911\n","R-squared (R2): 98.80429874979319 %\n"]}],"source":["# Define the Random Forest model\n","rf = RandomForestRegressor()\n","\n","#train model with training dataset\n","rf.fit(X_train, y_train)\n","\n","#test using train data (to find overfitting)\n","y_pred_train = rf.predict(X_train)\n","y_pred = rf.predict(X_test)\n","\n","# Calculate Mean Absolute Error\n","mae = mean_absolute_error(y_train, y_pred_train)\n","\n","# Calculate MAE as a percentage of the mean actual value\n","mae_percentage = (mae / y_test.mean()) * 100\n","print(\"Mean Absolute Error (MAE) Percentage:\", mae_percentage, \"%\")\n","\n","#find rmse of train model\n","mse = mean_squared_error(y_train, y_pred_train)\n","rmse = mse ** 0.5\n","print(\"Root Mean Squared Error (RMSE):\", rmse)\n","\n","# Calculate R-squared\n","r2 = r2_score(y_train, y_pred_train)\n","print(\"R-squared (R2):\", r2 * 100, \"%\")"]},{"cell_type":"code","execution_count":null,"id":"92581e9a-8210-4767-aa51-69abe5c57194","metadata":{"id":"92581e9a-8210-4767-aa51-69abe5c57194","outputId":"c5a6a14f-c9a6-41c1-fd27-82c11da92836","colab":{"base_uri":"https://localhost:8080/","height":654},"executionInfo":{"status":"ok","timestamp":1726370854680,"user_tz":-480,"elapsed":452,"user":{"displayName":"SHI YUN GAN","userId":"03889907775066405608"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["               Feature  Importance\n","0                  Age    0.563272\n","4  Years of Experience    0.290628\n","3            Job Title    0.115209\n","2      Education Level    0.026704\n","1               Gender    0.004186\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1200x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["# Assuming 'X' is original DataFrame\n","feature_names = X.columns  # Store the column names before splitting\n","\n","# Get feature importances from RandomForest model\n","importances = rf.feature_importances_\n","\n","# Sort feature importances in descending order\n","indices = np.argsort(importances)[::-1]\n","\n","# Create a DataFrame for easy plotting\n","features = X.columns\n","importance_df = pd.DataFrame({\n","    'Feature': features,\n","    'Importance': importances\n","}).sort_values(by='Importance', ascending=False)\n","\n","print(importance_df)\n","\n","# Plot feature importances\n","plt.figure(figsize=(12, 6))\n","plt.title(\"Feature Importances\")\n","plt.bar(range(X_train.shape[1]), importances[indices], align=\"center\")\n","plt.xticks(range(X_train.shape[1]), feature_names[indices])\n","plt.show()"]},{"cell_type":"markdown","id":"630a6406-eea4-4100-8c40-a125bf4b44bf","metadata":{"id":"630a6406-eea4-4100-8c40-a125bf4b44bf"},"source":["#### perform fine-tuning"]},{"cell_type":"markdown","id":"3f48a70c-4277-42c2-b545-bbf2f97bbbb6","metadata":{"id":"3f48a70c-4277-42c2-b545-bbf2f97bbbb6"},"source":["##### Search the best cv value"]},{"cell_type":"code","execution_count":null,"id":"7754b6bf-26e0-4b82-9e94-76290ee80413","metadata":{"id":"7754b6bf-26e0-4b82-9e94-76290ee80413","outputId":"5f18e052-4af0-448f-9f01-32d4c33acddf","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1726370898949,"user_tz":-480,"elapsed":39556,"user":{"displayName":"SHI YUN GAN","userId":"03889907775066405608"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["CV=2: Mean Score=-352671632.9365\n","CV=3: Mean Score=-366512946.0980\n","CV=4: Mean Score=-325088912.4736\n","CV=5: Mean Score=-262792367.6063\n","CV=6: Mean Score=-227755117.2708\n","CV=7: Mean Score=-201593661.5605\n","CV=8: Mean Score=-230328706.8878\n","CV=9: Mean Score=-225792051.7587\n","CV=10: Mean Score=-192791913.3961\n","CV=11: Mean Score=-187914945.0577\n","CV=12: Mean Score=-173268864.3782\n","CV=13: Mean Score=-169742525.9740\n","CV=14: Mean Score=-149787846.1290\n","CV=15: Mean Score=-184038616.7194\n","CV=16: Mean Score=-171869680.4473\n","CV=17: Mean Score=-176560813.0001\n","CV=18: Mean Score=-170555296.8565\n","CV=19: Mean Score=-163642918.8827\n","Best `cv` value: 14 with Mean Score: -149787846.1290\n"]}],"source":["# List of possible `cv` values to test\n","cv_values = list(range(2, 20, 1))\n","\n","# Store the average scores for each `cv` value\n","cv_scores = {}\n","\n","# Loop through each `cv` value to test\n","for cv in cv_values:\n","    # Perform cross-validation\n","    scores = cross_val_score(rf, X, y, cv=cv, scoring='neg_mean_squared_error')\n","\n","    # Calculate the mean score (use negative MSE because cross_val_score minimizes loss)\n","    mean_score = np.mean(scores)\n","\n","    # Store the average score for this `cv` value\n","    cv_scores[cv] = mean_score\n","    print(f'CV={cv}: Mean Score={mean_score:.4f}')\n","\n","# Find the `cv` with the best score\n","best_cv = max(cv_scores, key=cv_scores.get)\n","print(f'Best `cv` value: {best_cv} with Mean Score: {cv_scores[best_cv]:.4f}')"]},{"cell_type":"markdown","id":"0b297992-bed4-401a-a71e-de347e6794f4","metadata":{"id":"0b297992-bed4-401a-a71e-de347e6794f4"},"source":["##### After using cv value for training data"]},{"cell_type":"code","execution_count":null,"id":"6e921e70-1d52-42fa-8df5-83311d955568","metadata":{"id":"6e921e70-1d52-42fa-8df5-83311d955568","outputId":"2dbf69cc-f1f9-491b-ddfe-4659f41ef427","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1726370901795,"user_tz":-480,"elapsed":2871,"user":{"displayName":"SHI YUN GAN","userId":"03889907775066405608"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["Random sample of results:\n","Actual: 120000.0 | Predicted: 133050.0\n","Actual: 110000.0 | Predicted: 123100.0\n","Actual: 170000.0 | Predicted: 170000.0\n","Actual: 130000.0 | Predicted: 129700.0\n","Actual: 50000.0 | Predicted: 49900.0\n","Actual: 50000.0 | Predicted: 50150.0\n","Actual: 170000.0 | Predicted: 170650.0\n","Actual: 80000.0 | Predicted: 75250.0\n","Actual: 160000.0 | Predicted: 159100.0\n","Actual: 95000.0 | Predicted: 96050.0\n","Mean Absolute Error (MAE) Percentage: 3.0447830199595654 %\n","Root Mean Squared Error (RMSE): 13596.898764244892\n","R-squared (R2): 91.96341749351708 %\n"]}],"source":["# Function to peek at 10 random results\n","def peek_results(y_actual, y_pred, num=10):\n","    print('Random sample of results:')\n","    selected = np.random.randint(0, len(y_actual), num)\n","    for i in selected:\n","        print(f'Actual: {y_actual.iloc[i]} | Predicted: {y_pred[i]}')\n","\n","# Generate cross-validated predictions using cross_val_predict\n","y_pred_cv = cross_val_predict(rf, X_train, y_train, cv=14)\n","\n","# Peek at the results using the peek_results function\n","peek_results(y_train, y_pred_cv)\n","\n","# Calculate MAE as a percentage of the mean actual value\n","mae_percentage = (mae / y_test.mean()) * 100\n","print(\"Mean Absolute Error (MAE) Percentage:\", mae_percentage, \"%\")\n","\n","# Evaluate the model using Mean Squared Error and Root Mean Squared Error\n","mse = mean_squared_error(y_train, y_pred_cv)\n","rmse = mse ** 0.5\n","print(\"Root Mean Squared Error (RMSE):\", rmse)\n","\n","# Calculate R-squared\n","r2 = r2_score(y_train, y_pred_cv)\n","print(\"R-squared (R2):\", r2 * 100, \"%\")"]},{"cell_type":"markdown","id":"36052ef0-63e9-4769-9631-7a4ce8fb9270","metadata":{"id":"36052ef0-63e9-4769-9631-7a4ce8fb9270"},"source":["##### Search the best random state"]},{"cell_type":"code","execution_count":null,"id":"0816fffd-687b-460c-9517-3a04042226bb","metadata":{"id":"0816fffd-687b-460c-9517-3a04042226bb","outputId":"ba720e18-2227-45b6-cb1f-5fd180b13f6a","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1726370920716,"user_tz":-480,"elapsed":18924,"user":{"displayName":"SHI YUN GAN","userId":"03889907775066405608"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["Best random_state: 41 with MAE: 2742.03\n","Best random_state: 60 with RMSE: 4392.906190206057\n","Best random_state: 60 with R-squared: 99.17%\n"]}],"source":["# Suppress FutureWarnings\n","warnings.filterwarnings(\"ignore\", category=FutureWarning)\n","\n","# Set the range of random states to test\n","random_states = range(1, 101)  # Example range from 1 to 100\n","\n","# Store RMSE results for each random state\n","rmse_results = []\n","r2_results = []\n","mae_results = []\n","adjusted_r2_results = []\n","mape_results = []\n","medae_results = []\n","\n","for state in random_states:\n","    # Split the data with the current random state\n","    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=state)\n","\n","    # Initialize and train the model\n","    rf = RandomForestRegressor(\n","        random_state=state\n","    )\n","    rf.fit(X_train, y_train)\n","\n","    # Predict on the test set\n","    y_pred_train = rf.predict(X_train)\n","\n","    # Calculate MAE for the current random state\n","    mae = mean_absolute_error(y_train, y_pred_train)\n","    mae_results.append((state, mae))\n","\n","    # Calculate RMSE for the current random state\n","    rmse = mean_squared_error(y_train, y_pred_train, squared=False)\n","    rmse_results.append((state, rmse))\n","\n","    # Calculate R² for the current random state\n","    r2 = r2_score(y_train, y_pred_train)\n","    r2_results.append((state, r2))\n","\n","# Find the random state with the lowest MAE\n","best_state = min(mae_results, key=lambda x: x[1])\n","print(f\"Best random_state: {best_state[0]} with MAE: {best_state[1]:.2f}\")\n","\n","# Find the random state with the lowest RMSE\n","best_state = min(rmse_results, key=lambda x: x[1])\n","print(f\"Best random_state: {best_state[0]} with RMSE: {best_state[1]}\")\n","\n","# Find the random state with the highest R-squared\n","best_state = max(r2_results, key=lambda x: x[1])\n","print(f\"Best random_state: {best_state[0]} with R-squared: {best_state[1] * 100:.2f}%\")"]},{"cell_type":"markdown","id":"b7fca4e3-9b50-4f9e-b0e5-509a47de4d53","metadata":{"id":"b7fca4e3-9b50-4f9e-b0e5-509a47de4d53"},"source":["##### Search the best parameter grid"]},{"cell_type":"code","execution_count":null,"id":"7a4aeae1-3d20-469d-9b98-662103099d2a","metadata":{"id":"7a4aeae1-3d20-469d-9b98-662103099d2a","outputId":"7b00fbd3-6065-4ac6-c38c-2c6c3b76a047","colab":{"base_uri":"https://localhost:8080/","height":387},"executionInfo":{"status":"error","timestamp":1726372483855,"user_tz":-480,"elapsed":1563147,"user":{"displayName":"SHI YUN GAN","userId":"03889907775066405608"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["Performing grid search...Fitting 14 folds for each of 6840 candidates, totalling 95760 fits\n"]},{"output_type":"error","ename":"KeyboardInterrupt","evalue":"","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-44-5137fa715961>\u001b[0m in \u001b[0;36m<cell line: 26>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     24\u001b[0m \u001b[0;31m# Perform the grid search\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     25\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Performing grid search...'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mend\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m''\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 26\u001b[0;31m \u001b[0mgrid_search\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_train\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     27\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'done'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     28\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/base.py\u001b[0m in \u001b[0;36mwrapper\u001b[0;34m(estimator, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1150\u001b[0m                 )\n\u001b[1;32m   1151\u001b[0m             ):\n\u001b[0;32m-> 1152\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mfit_method\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mestimator\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1153\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1154\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mwrapper\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/model_selection/_search.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, X, y, groups, **fit_params)\u001b[0m\n\u001b[1;32m    896\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mresults\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    897\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 898\u001b[0;31m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_run_search\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mevaluate_candidates\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    899\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    900\u001b[0m             \u001b[0;31m# multimetric is determined here because in the case of a callable\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/model_selection/_search.py\u001b[0m in \u001b[0;36m_run_search\u001b[0;34m(self, evaluate_candidates)\u001b[0m\n\u001b[1;32m   1420\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_run_search\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mevaluate_candidates\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1421\u001b[0m         \u001b[0;34m\"\"\"Search all candidates in param_grid\"\"\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1422\u001b[0;31m         \u001b[0mevaluate_candidates\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mParameterGrid\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mparam_grid\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1423\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1424\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/model_selection/_search.py\u001b[0m in \u001b[0;36mevaluate_candidates\u001b[0;34m(candidate_params, cv, more_results)\u001b[0m\n\u001b[1;32m    843\u001b[0m                     )\n\u001b[1;32m    844\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 845\u001b[0;31m                 out = parallel(\n\u001b[0m\u001b[1;32m    846\u001b[0m                     delayed(_fit_and_score)(\n\u001b[1;32m    847\u001b[0m                         \u001b[0mclone\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbase_estimator\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/utils/parallel.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, iterable)\u001b[0m\n\u001b[1;32m     63\u001b[0m             \u001b[0;32mfor\u001b[0m \u001b[0mdelayed_func\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwargs\u001b[0m \u001b[0;32min\u001b[0m \u001b[0miterable\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     64\u001b[0m         )\n\u001b[0;32m---> 65\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0msuper\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__call__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0miterable_with_config\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     66\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     67\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/joblib/parallel.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, iterable)\u001b[0m\n\u001b[1;32m   2005\u001b[0m         \u001b[0mnext\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0moutput\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2006\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2007\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0moutput\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreturn_generator\u001b[0m \u001b[0;32melse\u001b[0m \u001b[0mlist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0moutput\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2008\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2009\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__repr__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/joblib/parallel.py\u001b[0m in \u001b[0;36m_get_outputs\u001b[0;34m(self, iterator, pre_dispatch)\u001b[0m\n\u001b[1;32m   1648\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1649\u001b[0m             \u001b[0;32mwith\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_backend\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mretrieval_context\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1650\u001b[0;31m                 \u001b[0;32myield\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_retrieve\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1651\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1652\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mGeneratorExit\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/joblib/parallel.py\u001b[0m in \u001b[0;36m_retrieve\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m   1760\u001b[0m                 (self._jobs[0].get_status(\n\u001b[1;32m   1761\u001b[0m                     timeout=self.timeout) == TASK_PENDING)):\n\u001b[0;32m-> 1762\u001b[0;31m                 \u001b[0mtime\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msleep\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m0.01\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1763\u001b[0m                 \u001b[0;32mcontinue\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1764\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "]}],"source":["# Define the parameter grid\n","param_grid = {\n","    'n_estimators': list(range(100, 500, 100)),  # Number of trees\n","    'min_samples_split': [2, 5, 10],  # Minimum samples to split a node\n","    'min_samples_leaf': [1, 2, 4],    # Minimum samples at a leaf node\n","    'max_depth': [None] + list(range(10, 100, 5)),  # Depth of trees\n","    'max_features': list(range(1, 50, 5)),  # Range from 1 to 50 with increment of 5\n","}\n","\n","# param_grid = {\n","#     'n_estimators': [400],  # Number of trees\n","#     'min_samples_split': [2],  # Minimum samples to split a node\n","#     'min_samples_leaf': [1],    # Minimum samples at a leaf node\n","#     'max_depth': [10],  # Depth of trees\n","#     'max_features': [1],  # Range from 1 to 50 with increment of 5\n","# }\n","\n","# Initialize the RandomForestRegressor\n","rf = RandomForestRegressor(random_state=60)\n","\n","# Initialize GridSearchCV\n","grid_search = GridSearchCV(rf, param_grid, cv=14, scoring='neg_mean_squared_error', verbose=2, n_jobs=-1)\n","\n","# Perform the grid search\n","print('Performing grid search...', end='')\n","grid_search.fit(X_train, y_train)\n","print('done')\n","\n","# Output the best parameters\n","best_params = grid_search.best_params_\n","print(\"Best parameters found:\", best_params)\n","\n","# Retrain the model using the best parameters\n","best_forest_model = RandomForestRegressor(**best_params, random_state=13)\n","best_forest_model.fit(X_train, y_train)\n","\n","# Predict on the test set using the tuned model\n","y_pred_best = best_forest_model.predict(X_test)"]},{"cell_type":"code","execution_count":null,"id":"65c5126d-b9ee-4da8-8ade-e6559dd9cd3b","metadata":{"id":"65c5126d-b9ee-4da8-8ade-e6559dd9cd3b"},"outputs":[],"source":["# Predict on the test set using the best model from GridSearchCV\n","y_pred_best = best_forest_model.predict(X_train)\n","\n","# Calculate R-squared (R²) for the best model\n","r2_best = r2_score(y_train, y_pred_best)\n","print(\"R-squared of the best model:\", r2_best * 100, \"%\")"]},{"cell_type":"markdown","id":"b6e1421f-b919-467d-9a66-8dbdc38462d0","metadata":{"id":"b6e1421f-b919-467d-9a66-8dbdc38462d0"},"source":["### Step 5: Evaluate the model [Code]"]},{"cell_type":"markdown","id":"84177e79-505f-4b9f-b4f1-6d3cd85fcf9b","metadata":{"id":"84177e79-505f-4b9f-b4f1-6d3cd85fcf9b"},"source":["#### show prediction for test result before fine-tune"]},{"cell_type":"code","execution_count":null,"id":"ca5a1503-8d75-4203-afa3-d7f74515ae92","metadata":{"id":"ca5a1503-8d75-4203-afa3-d7f74515ae92","outputId":"a70f0fac-6ef7-4156-fc44-655768b6c105"},"outputs":[{"name":"stdout","output_type":"stream","text":["Mean Absolute Error (MAE) Percentage: 50.87223066666666 %\n","Root Mean Squared Error (RMSE): 63263.234901870135\n","R-squared (R2): -83.2526048648901 %\n"]}],"source":["# Calculate Mean Absolute Error\n","mae = mean_absolute_error(y_test, y_pred)\n","\n","# Calculate MAE as a percentage of the mean actual value\n","mae_percentage = (mae / y_test.mean()) * 100\n","print(\"Mean Absolute Error (MAE) Percentage:\", mae_percentage, \"%\")\n","\n","# Evaluate the model using Mean Squared Error and Root Mean Squared Error\n","mse = mean_squared_error(y_test, y_pred)\n","rmse = mse ** 0.5\n","print(\"Root Mean Squared Error (RMSE):\", rmse)\n","\n","# Calculate R-squared\n","r2 = r2_score(y_test, y_pred)\n","print(\"R-squared (R2):\", r2 * 100, \"%\")"]},{"cell_type":"markdown","id":"31e379e8-6d3f-4b79-81cc-84fa8b022d2f","metadata":{"id":"31e379e8-6d3f-4b79-81cc-84fa8b022d2f"},"source":["#### after fine-tune"]},{"cell_type":"code","execution_count":null,"id":"dce96424-cf3d-46ed-a7b3-6c8670f20cc8","metadata":{"id":"dce96424-cf3d-46ed-a7b3-6c8670f20cc8","outputId":"58acd7e4-96a5-4a28-c729-2bda1e30dfba"},"outputs":[{"name":"stdout","output_type":"stream","text":["Mean Absolute Error (MAE) Percentage: 6.697962898915797 %\n","Root Mean Squared Error (RMSE): 10122.741429633526\n","R-squared (R2): 95.30815503428485 %\n"]}],"source":["# Predict the target on the testing set\n","y_pred_test = best_forest_model.predict(X_test)\n","\n","# Calculate Mean Absolute Error\n","mae = mean_absolute_error(y_test, y_pred_test)\n","\n","# Calculate MAE as a percentage of the mean actual value\n","mae_percentage = (mae / y_test.mean()) * 100\n","print(\"Mean Absolute Error (MAE) Percentage:\", mae_percentage, \"%\")\n","\n","# Evaluate the model using Mean Squared Error and Root Mean Squared Error\n","mse = mean_squared_error(y_test, y_pred_test)\n","rmse = mse ** 0.5\n","print(\"Root Mean Squared Error (RMSE):\", rmse)\n","\n","# Calculate R-squared\n","r2 = r2_score(y_test, y_pred_test)\n","print(\"R-squared (R2):\", r2 * 100, \"%\")"]},{"cell_type":"markdown","id":"81a2b759-6e79-4a3a-a89f-f353e049d679","metadata":{"id":"81a2b759-6e79-4a3a-a89f-f353e049d679"},"source":["#### Comparison"]},{"cell_type":"code","execution_count":null,"id":"c0d15598-93ad-413b-8054-dceb36cc0097","metadata":{"id":"c0d15598-93ad-413b-8054-dceb36cc0097","outputId":"17e78024-bde2-4b64-8caf-d321beca0af6"},"outputs":[{"name":"stdout","output_type":"stream","text":["                        Metric  Before Fine-Tuning  After Fine-Tuning\n","     Mean Absolute Error (MAE)        50872.230667        6697.962899\n","                MAE Percentage           50.872231           6.697963\n","Root Mean Squared Error (RMSE)        63263.234902       10122.741430\n","                R-squared (R2)          -83.252605          95.308155\n"]}],"source":["# Results before fine-tuning\n","mae_before = mean_absolute_error(y_test, y_pred)\n","mae_percentage_before = (mae_before / y_test.mean()) * 100\n","mse_before = mean_squared_error(y_test, y_pred)\n","rmse_before = mse_before ** 0.5\n","r2_before = r2_score(y_test, y_pred) * 100\n","\n","# Results after fine-tuning\n","mae_after_rf = mean_absolute_error(y_test, y_pred_test)\n","mae_percentage_after_rf = (mae_after_rf / y_test.mean()) * 100\n","mse_after_rf = mean_squared_error(y_test, y_pred_test)\n","rmse_after_rf = mse_after_rf ** 0.5\n","r2_after_rf = r2_score(y_test, y_pred_test) * 100\n","\n","# Create a DataFrame to display the results\n","results = pd.DataFrame({\n","    'Metric': ['Mean Absolute Error (MAE)', 'MAE Percentage', 'Root Mean Squared Error (RMSE)', 'R-squared (R2)'],\n","    'Before Fine-Tuning': [mae_before, mae_percentage_before, rmse_before, r2_before],\n","    'After Fine-Tuning': [mae_after_rf, mae_percentage_after_rf, rmse_after_rf, r2_after_rf]\n","})\n","\n","# Display the DataFrame\n","print(results.to_string(index=False))\n"]},{"cell_type":"markdown","id":"38c7490e-b1c0-4565-ac35-2e79f0ad54c4","metadata":{"id":"38c7490e-b1c0-4565-ac35-2e79f0ad54c4"},"source":["### Step 6: Predict unseen data"]},{"cell_type":"code","execution_count":null,"id":"c5eceef6-e1d3-4dd4-883a-ad1c3a62dd33","metadata":{"id":"c5eceef6-e1d3-4dd4-883a-ad1c3a62dd33","outputId":"02f66a95-da54-4910-c99e-2780e644418f"},"outputs":[{"name":"stdout","output_type":"stream","text":["Predicted salary for unseen data: 60087.34\n"]}],"source":["# Sample test data\n","\n","test_data = {\n","    'Age': [28],  # Age values\n","    'Gender': ['Female'],  # Gender values\n","    'Education Level': ['Master\\'s'],  # Education levels\n","    'Job Title': ['Data Analyst'],  # Job titles\n","    'Years of Experience': [3]  # Years of experience\n","}\n","\n","# Convert to DataFrame\n","test_df = pd.DataFrame(test_data)\n","\n","# Preprocess unseen data\n","for column, le in label_encoders.items():\n","    if column in test_df.columns:\n","        test_df[column] = le.transform(test_df[column])\n","        # print(test_df[column])\n","\n","for column, scaler in scaler_columns.items():\n","    # Ensure the column exists in the unseen data\n","    if column in test_df.columns:\n","        # Apply the scaler and update the column\n","        test_df[[column]] = scaler.transform(test_df[[column]])\n","        # print(test_df[column])\n","\n","# Ensure all columns are present and in the correct order\n","test_df = test_df[X.columns]\n","\n","# Predict the salary_in_usd for new unseen data\n","predicted_salary = best_forest_model.predict(test_df)\n","\n","print(f\"Predicted salary for unseen data: {predicted_salary[0]:.2f}\")"]},{"cell_type":"markdown","id":"7f299bc8-352e-4bab-a730-c5a64ed228f5","metadata":{"id":"7f299bc8-352e-4bab-a730-c5a64ed228f5"},"source":["### Step 7 Store the model in Joblib"]},{"cell_type":"code","execution_count":null,"id":"3cb932a2-0f70-45ed-9ff1-887d7d17f180","metadata":{"id":"3cb932a2-0f70-45ed-9ff1-887d7d17f180","outputId":"1cd16eff-9440-45b0-ea0c-941251ceb5b5"},"outputs":[{"data":{"text/plain":["['best_forest_model.joblib']"]},"execution_count":44,"metadata":{},"output_type":"execute_result"}],"source":["dump(best_forest_model, 'best_forest_model.joblib')"]},{"cell_type":"code","execution_count":null,"id":"076c881a-d01d-4404-bcc8-fdd65266f81a","metadata":{"id":"076c881a-d01d-4404-bcc8-fdd65266f81a"},"outputs":[],"source":["# Load the model\n","# test_best_forest_model = load('best_forest_model.joblib')"]},{"cell_type":"code","execution_count":null,"id":"aa56f434-b5f0-4bac-a2a0-c246c4748e80","metadata":{"id":"aa56f434-b5f0-4bac-a2a0-c246c4748e80"},"outputs":[],"source":["# # Sample user input\n","# age = float(input(\"Enter Age: \"))\n","# gender = input(\"Enter Gender (Male/Female): \")\n","# education_level = input(\"Enter Education Level (e.g., Bachelor's, Master's, etc.): \")\n","# job_title = input(\"Enter Job Title (e.g., Data Scientist, Data Engineer, etc.): \")\n","# years_of_experience = float(input(\"Enter Years of Experience: \"))\n","\n","# # Create a dictionary to represent the user input\n","# entered_data = {\n","#     'Age': [age],\n","#     'Gender': [gender],\n","#     'Education Level': [education_level],\n","#     'Job Title': [job_title],\n","#     'Years of Experience': [years_of_experience]\n","# }\n","\n","# test_entered_data = pd.DataFrame(entered_data)\n","\n","# test_label_encoders = {}\n","\n","# for column in test_entered_data.select_dtypes(include=['object']).columns:\n","#     le = LabelEncoder()\n","#     test_entered_data[column] = le.fit_transform(test_entered_data[column])\n","#     test_label_encoders[column] = le\n","\n","# # Initialize StandardScaler for numerical features\n","# test_scaler = StandardScaler()\n","\n","# # Scale numerical variables\n","# for column in test_entered_data.select_dtypes(include=['float64']).columns:\n","#     test_entered_data[column] = scaler.fit_transform(test_entered_data[[column]])\n","\n","\n","# # Assuming 'rf' is your trained RandomForestRegressor model\n","# test_y_pred_test = test_best_forest_model.predict(test_entered_data)\n","# print(\"\\nPredicted Salary:\", round(test_y_pred_test[0], 2))"]},{"cell_type":"markdown","id":"3a76920e-e106-4ccc-b3d5-fd3b7ed39a74","metadata":{"id":"3a76920e-e106-4ccc-b3d5-fd3b7ed39a74"},"source":["## Decision Tree"]},{"cell_type":"markdown","id":"13339463-44b8-448a-be3b-26d788e4eea7","metadata":{"id":"13339463-44b8-448a-be3b-26d788e4eea7"},"source":["### Step 2 & 3 : Feature Extraction and Split the data (into training and testing set)"]},{"cell_type":"code","execution_count":null,"id":"ed4cb0ea-697c-4f08-8c7b-b6d8ef995622","metadata":{"id":"ed4cb0ea-697c-4f08-8c7b-b6d8ef995622","outputId":"de0faaa9-8919-49ba-9c57-44f66248cce4","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1726370465719,"user_tz":-480,"elapsed":4,"user":{"displayName":"SHI YUN GAN","userId":"03889907775066405608"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["(298, 5)\n","(298,)\n","(75, 5)\n","(75,)\n"]}],"source":["# Split the data into training and testing sets\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n","print(X_train.shape)           #see all data shape (row, column), column needs to be same in train/test\n","print(y_train.shape)\n","print(X_test.shape)\n","print(y_test.shape)"]},{"cell_type":"markdown","id":"3b9103b5-aa1d-4cf7-a926-6a744235bc9b","metadata":{"id":"3b9103b5-aa1d-4cf7-a926-6a744235bc9b"},"source":["### Step 4: Fit model and predict outcomes [Code]"]},{"cell_type":"markdown","id":"bbdfae75-b3c9-488f-a9d2-9181b67a3dee","metadata":{"id":"bbdfae75-b3c9-488f-a9d2-9181b67a3dee"},"source":["#### Get feature importances"]},{"cell_type":"code","execution_count":null,"id":"8cb2466f-7463-4f4f-a97d-418922a30574","metadata":{"id":"8cb2466f-7463-4f4f-a97d-418922a30574","outputId":"42921ef2-73c5-4091-ef5d-6e426948bcb5","colab":{"base_uri":"https://localhost:8080/","height":673},"executionInfo":{"status":"ok","timestamp":1726370485006,"user_tz":-480,"elapsed":1525,"user":{"displayName":"SHI YUN GAN","userId":"03889907775066405608"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["               Feature  Importance\n","0                  Age    0.721930\n","4  Years of Experience    0.170569\n","3            Job Title    0.073636\n","2      Education Level    0.030962\n","1               Gender    0.002903\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["# Define the Decision Tree model\n","decisiontree = DecisionTreeRegressor(random_state=42)\n","\n","# Fit the model\n","decisiontree.fit(X_train, y_train)\n","\n","# Get feature importances\n","importances = decisiontree.feature_importances_\n","\n","# Create a DataFrame for easy plotting\n","features = X.columns\n","importance_df = pd.DataFrame({\n","    'Feature': features,\n","    'Importance': importances\n","}).sort_values(by='Importance', ascending=False)\n","\n","print(importance_df)\n","\n","plt.figure(figsize=(10,6))\n","plt.barh(features, importances)\n","plt.xlabel(\"Importance\")\n","plt.title(\"Feature Importance for Decision Tree\")\n","plt.show()"]},{"cell_type":"markdown","id":"12c6dea0-58a7-4b98-88ee-e5ddb148de38","metadata":{"id":"12c6dea0-58a7-4b98-88ee-e5ddb148de38"},"source":["#### Train Model"]},{"cell_type":"code","execution_count":null,"id":"85e37c77-c13e-4acf-9580-c8002048e23b","metadata":{"id":"85e37c77-c13e-4acf-9580-c8002048e23b","outputId":"933e9213-1db2-4f76-e274-caa09e11648d","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1726370670607,"user_tz":-480,"elapsed":382,"user":{"displayName":"SHI YUN GAN","userId":"03889907775066405608"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["Root Mean Squared Error (RMSE): 1419.3193022992375\n","R-squared (R2): 99.91243069602965 %\n"]}],"source":["# Define the Decision Tree model\n","decisiontree = DecisionTreeRegressor(random_state=42)\n","\n","#train model with training dataset\n","decisiontree.fit(X_train, y_train)\n","\n","#test using train data (to find overfitting)\n","y_pred_train_tree = decisiontree.predict(X_train)\n","y_pred = decisiontree.predict(X_test)\n","\n","#find rmse of train model\n","mse = mean_squared_error(y_train, y_pred_train_tree)\n","rmse = mse ** 0.5\n","print(\"Root Mean Squared Error (RMSE):\", rmse)\n","\n","# Calculate R-squared\n","r2 = r2_score(y_train, y_pred_train_tree)\n","print(\"R-squared (R2):\", r2 * 100, \"%\")"]},{"cell_type":"markdown","id":"1f0d851a-9975-4bbc-b45b-1847d2606209","metadata":{"id":"1f0d851a-9975-4bbc-b45b-1847d2606209"},"source":["#### Show Random Prediction Result"]},{"cell_type":"code","execution_count":null,"id":"2fa06b67-6699-464d-a4c8-83a518dafd40","metadata":{"id":"2fa06b67-6699-464d-a4c8-83a518dafd40","outputId":"7868a466-26d1-4499-ec87-6a49b3d6ec6d","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1726370492416,"user_tz":-480,"elapsed":457,"user":{"displayName":"SHI YUN GAN","userId":"03889907775066405608"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["Random sample of results:\n","Actual: 95000.0 | Predicted: 110000.0\n","Actual: 170000.0 | Predicted: 170000.0\n","Actual: 120000.0 | Predicted: 105000.0\n","Actual: 40000.0 | Predicted: 40000.0\n","Actual: 105000.0 | Predicted: 110000.0\n","Actual: 80000.0 | Predicted: 120000.0\n","Actual: 100000.0 | Predicted: 100000.0\n","Actual: 100000.0 | Predicted: 120000.0\n","Actual: 150000.0 | Predicted: 150000.0\n","Actual: 70000.0 | Predicted: 50000.0\n"]}],"source":["# Function to peek at 10 random results\n","def peek_results(y_actual, y_pred, num=10):\n","    print('Random sample of results:')\n","    selected = np.random.randint(0, len(y_actual), num)\n","    for i in selected:\n","        print(f'Actual: {y_actual.iloc[i]} | Predicted: {y_pred[i]}')\n","\n","# Generate cross-validated predictions using cross_val_predict\n","y_pred_cv_tree = cross_val_predict(decisiontree, X_train, y_train, cv=5)\n","\n","# Peek at the results using the peek_results function\n","peek_results(y_train, y_pred_cv_tree)"]},{"cell_type":"markdown","id":"a931ee39-f392-4a87-b97b-ed2b4fc8402f","metadata":{"id":"a931ee39-f392-4a87-b97b-ed2b4fc8402f"},"source":["#### Perform Fine-Tuning"]},{"cell_type":"code","execution_count":null,"id":"ec225d81-312c-4a0c-9450-0e49a211b775","metadata":{"id":"ec225d81-312c-4a0c-9450-0e49a211b775","outputId":"3ce9bdaf-009e-490d-967a-251edcf5cf65","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1726370596756,"user_tz":-480,"elapsed":102037,"user":{"displayName":"SHI YUN GAN","userId":"03889907775066405608"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["Performing grid search... Please wait.\n","Fitting 5 folds for each of 3240 candidates, totalling 16200 fits\n","\n","Grid Search Complete!\n","Best parameters found: {'criterion': 'squared_error', 'max_depth': None, 'max_features': None, 'min_samples_leaf': 1, 'min_samples_split': 10, 'min_weight_fraction_leaf': 0.0}\n","\n","RMSE of the best model from Grid Search: 16246.5327\n","Best Model Training R-squared: 96.61%\n"]}],"source":["# Perform parameter grid\n","param_grid = {\n","    'max_depth': [None] + list(range(5, 30, 5)),          # Depth of the tree (None for no limit or a range of values)\n","    'min_samples_split': list(range(2, 20, 2)),              # Minimum number of samples to split a node\n","    'min_samples_leaf': list(range(1, 10, 2)),                  # Minimum number of samples required in a leaf\n","    'criterion': ['squared_error', 'absolute_error'],             # Criterion for measuring the quality of a split\n","    'max_features': [None, 'sqrt', 'log2'],                       # Number of features to consider when looking for the best split\n","    'min_weight_fraction_leaf': [0.0, 0.01]          # Fraction of the total weight of samples required to be at a leaf node\n","}\n","\n","# param_grid = {\n","#     'max_depth': [None],          # Depth of the tree (None for no limit or a range of values)\n","#     'min_samples_split': [10],              # Minimum number of samples to split a node\n","#     'min_samples_leaf': [1],                  # Minimum number of samples required in a leaf\n","#     'criterion': ['squared_error'],             # Criterion for measuring the quality of a split\n","#     'max_features': [None],                       # Number of features to consider when looking for the best split\n","#     'min_weight_fraction_leaf': [0.0]\n","# }\n","\n","# Initialize GridSearchCV with DecisionTreeRegressor\n","grid_search = GridSearchCV(DecisionTreeRegressor(random_state=42), param_grid,\n","                           cv=5, scoring='neg_mean_squared_error', verbose=1, n_jobs=-1)\n","\n","# Perform the grid search\n","print(\"Performing grid search... Please wait.\")\n","grid_search.fit(X_train, y_train)\n","\n","# Check if any parameters were tuned\n","if grid_search.best_params_:\n","    print(\"\\nGrid Search Complete!\")\n","    print(f\"Best parameters found: {grid_search.best_params_}\")\n","else:\n","    print(\"\\nNo hyperparameters were tuned. Using default parameters.\")\n","\n","# Output RMSE of the best model\n","best_rmse = np.sqrt(-grid_search.best_score_)\n","print(f\"\\nRMSE of the best model from Grid Search: {best_rmse:.4f}\")\n","\n","# Use the best model found by GridSearchCV\n","best_tree_model = grid_search.best_estimator_\n","\n","# Predict on the training set using the best model\n","y_pred_train = best_tree_model.predict(X_train)\n","\n","# Calculate R-squared (R²) for the best model on the training set\n","r2_best_train = r2_score(y_train, y_pred_train)\n","\n","# Display the R-squared score\n","print(f\"Best Model Training R-squared: {r2_best_train * 100:.2f}%\")\n"]},{"cell_type":"markdown","id":"8402e316-9b51-46f3-89bc-54cdc5e05676","metadata":{"id":"8402e316-9b51-46f3-89bc-54cdc5e05676"},"source":["### Step 5: Evaluate the model [Code]"]},{"cell_type":"markdown","id":"1b21b054-edf7-4ab3-bfa0-e9594665c898","metadata":{"id":"1b21b054-edf7-4ab3-bfa0-e9594665c898"},"source":["#### using fine-tuned model to predict test data"]},{"cell_type":"code","execution_count":null,"id":"83d7ac87-21cb-4111-8d6f-14b374d37c6e","metadata":{"id":"83d7ac87-21cb-4111-8d6f-14b374d37c6e","outputId":"98dbcc77-391b-4689-c377-aaf20900cbad","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1726370631418,"user_tz":-480,"elapsed":465,"user":{"displayName":"SHI YUN GAN","userId":"03889907775066405608"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["Model Evaluation Results on Test Set:\n","----------------------------------------\n","Root Mean Squared Error (RMSE): 14471.9172\n","R-squared: 91.26%\n","----------------------------------------\n"]}],"source":["# Predict the target on the testing set\n","y_pred_test = best_tree_model.predict(X_test)\n","\n","# Evaluate the model using Mean Squared Error and Root Mean Squared Error\n","mse = mean_squared_error(y_test, y_pred_test)\n","rmse = mse ** 0.5\n","\n","# Calculate R-squared\n","r2 = r2_score(y_test, y_pred_test)\n","print(f\"Model Evaluation Results on Test Set:\")\n","print(f\"{'-'*40}\")\n","print(f\"Root Mean Squared Error (RMSE): {rmse:.4f}\")\n","print(f\"R-squared: {r2 * 100:.2f}%\")\n","print(f\"{'-'*40}\")"]},{"cell_type":"code","execution_count":null,"id":"3509bd96-8f87-4d8d-9ea4-8185d5e572d4","metadata":{"id":"3509bd96-8f87-4d8d-9ea4-8185d5e572d4","outputId":"9e0c1ee6-ec46-4679-ef3a-f00012fc076b","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1726370675910,"user_tz":-480,"elapsed":458,"user":{"displayName":"SHI YUN GAN","userId":"03889907775066405608"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["                        Metric  Before Fine-Tuning  After Fine-Tuning\n","     Mean Absolute Error (MAE)        10400.000000        9993.412698\n","                MAE Percentage           10.149642           9.752843\n","Root Mean Squared Error (RMSE)        16268.579123       14471.917234\n","                R-squared (R2)           88.961102          91.264684\n"]}],"source":["# Results before fine-tuning\n","mae_before = mean_absolute_error(y_test, y_pred)\n","mae_percentage_before = (mae_before / y_test.mean()) * 100\n","mse_before = mean_squared_error(y_test, y_pred)\n","rmse_before = mse_before ** 0.5\n","r2_before = r2_score(y_test, y_pred) * 100\n","\n","# Results after fine-tuning\n","mae_after_dt = mean_absolute_error(y_test, y_pred_test)\n","mae_percentage_after_dt = (mae_after_dt / y_test.mean()) * 100\n","mse_after_dt = mean_squared_error(y_test, y_pred_test)\n","rmse_after_dt = mse_after_dt ** 0.5\n","r2_after_dt = r2_score(y_test, y_pred_test) * 100\n","\n","# Create a DataFrame to display the results\n","results = pd.DataFrame({\n","    'Metric': ['Mean Absolute Error (MAE)', 'MAE Percentage', 'Root Mean Squared Error (RMSE)', 'R-squared (R2)'],\n","    'Before Fine-Tuning': [mae_before, mae_percentage_before, rmse_before, r2_before],\n","    'After Fine-Tuning': [mae_after_dt, mae_percentage_after_dt, rmse_after_dt, r2_after_dt]\n","})\n","\n","# Display the DataFrame\n","print(results.to_string(index=False))"]},{"cell_type":"markdown","id":"2d73170e-6469-4518-bf84-aeac4aa2e934","metadata":{"id":"2d73170e-6469-4518-bf84-aeac4aa2e934"},"source":["### Step 6: Predict unseen data"]},{"cell_type":"code","execution_count":null,"id":"8e3eff7f-d906-474c-98fe-70d00236f345","metadata":{"id":"8e3eff7f-d906-474c-98fe-70d00236f345","executionInfo":{"status":"ok","timestamp":1726370682975,"user_tz":-480,"elapsed":396,"user":{"displayName":"SHI YUN GAN","userId":"03889907775066405608"}},"outputId":"73717651-8bd0-4539-98f4-b47ff0b3fea2","colab":{"base_uri":"https://localhost:8080/"}},"outputs":[{"output_type":"stream","name":"stdout","text":["Preprocessing unseen data for prediction...\n","\n","Encoded Gender: Female -> 0\n","Encoded Education Level: Bachelor's -> 0\n","Encoded Job Title: Data Analyst -> 17\n","Standardized Age: -1.7609569840409987\n","Standardized Years of Experience: -1.3791293769321766\n","\n","Prediction complete!\n","Predicted Salary for the test data: $38,125.00\n"]}],"source":["# Sample test data\n","test_data = {\n","    'Age': [25],                            # Age values\n","    'Gender': ['Female'],                   # Gender values\n","    'Education Level': [\"Bachelor's\"],      # Education levels\n","    'Job Title': ['Data Analyst'],          # Job titles\n","    'Years of Experience': [1]              # Years of experience\n","}\n","\n","# Convert to DataFrame\n","test_df = pd.DataFrame(test_data)\n","\n","# Preprocess unseen data\n","print(\"Preprocessing unseen data for prediction...\\n\")\n","\n","# Label encode categorical variables\n","for column, le in label_encoders.items():\n","    if column in test_df.columns:\n","        test_df[column] = le.transform(test_df[column])\n","        print(f\"Encoded {column}: {test_data[column][0]} -> {test_df[column][0]}\")\n","\n","# Standardize numerical variables\n","for column, scaler in scaler_columns.items():\n","    if column in test_df.columns:\n","        test_df[[column]] = scaler.transform(test_df[[column]])\n","        print(f\"Standardized {column}: {test_df[column][0]}\")\n","\n","# Ensure all columns are present and in the correct order\n","test_df = test_df[X.columns]\n","\n","# Predict the salary for the unseen data\n","predicted_salary = best_tree_model.predict(test_df)\n","\n","# Display the prediction result\n","print(\"\\nPrediction complete!\")\n","print(f\"Predicted Salary for the test data: ${predicted_salary[0]:,.2f}\")\n"]},{"cell_type":"markdown","id":"f7d0ff10-028a-453f-9e31-adca76cf2bd4","metadata":{"id":"f7d0ff10-028a-453f-9e31-adca76cf2bd4"},"source":["### Step 7 Store the model in Joblib"]},{"cell_type":"code","execution_count":null,"id":"921f42dd-e6f6-4250-8652-3ef77cdb953a","metadata":{"id":"921f42dd-e6f6-4250-8652-3ef77cdb953a","outputId":"6ff562e8-c41b-4ca3-cf7a-043484feab97","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1726370691042,"user_tz":-480,"elapsed":423,"user":{"displayName":"SHI YUN GAN","userId":"03889907775066405608"}}},"outputs":[{"output_type":"execute_result","data":{"text/plain":["['decision_tree_model.joblib']"]},"metadata":{},"execution_count":26}],"source":["dump(best_tree_model, 'decision_tree_model.joblib')"]},{"cell_type":"code","execution_count":null,"id":"e730d457-44b6-460c-9654-c0b7205bc692","metadata":{"id":"e730d457-44b6-460c-9654-c0b7205bc692"},"outputs":[],"source":["# Load the model\n","# test_best_tree_model = load('decision_tree_model.joblib')"]},{"cell_type":"code","execution_count":null,"id":"cd7e74b0-a24d-4a77-91c3-efec4ba678cb","metadata":{"id":"cd7e74b0-a24d-4a77-91c3-efec4ba678cb"},"outputs":[],"source":["# # Sample user input\n","# age = float(input(\"Enter Age: \"))\n","# gender = input(\"Enter Gender (Male/Female): \")\n","# education_level = input(\"Enter Education Level (e.g., Bachelor's, Master's, etc.): \")\n","# job_title = input(\"Enter Job Title (e.g., Data Scientist, Data Engineer, etc.): \")\n","# years_of_experience = float(input(\"Enter Years of Experience: \"))\n","\n","# # Create a dictionary to represent the user input\n","# entered_data = {\n","#     'Age': [age],\n","#     'Gender': [gender],\n","#     'Education Level': [education_level],\n","#     'Job Title': [job_title],\n","#     'Years of Experience': [years_of_experience]\n","# }\n","\n","# test_entered_data = pd.DataFrame(entered_data)\n","\n","# test_label_encoders = {}\n","\n","# for column in test_entered_data.select_dtypes(include=['object']).columns:\n","#     le = LabelEncoder()\n","#     test_entered_data[column] = le.fit_transform(test_entered_data[column])\n","#     test_label_encoders[column] = le\n","\n","# # Initialize StandardScaler for numerical features\n","# test_scaler = StandardScaler()\n","\n","# # Scale numerical variables\n","# for column in test_entered_data.select_dtypes(include=['float64']).columns:\n","#     test_entered_data[column] = scaler.fit_transform(test_entered_data[[column]])\n","\n","\n","# test_y_pred_test = test_best_tree_model.predict(test_entered_data)\n","# print(\"\\nPredicted Salary:\", round(test_y_pred_test[0], 2))"]},{"cell_type":"markdown","id":"26ee5ef5-1089-409a-a19b-f51af697433d","metadata":{"id":"26ee5ef5-1089-409a-a19b-f51af697433d"},"source":["## KNN"]},{"cell_type":"markdown","id":"1e47a088-b3be-407c-9897-f6cd61c14e99","metadata":{"id":"1e47a088-b3be-407c-9897-f6cd61c14e99"},"source":["### Step 2 & 3 : Feature Extraction and Split the data (into training and testing set)"]},{"cell_type":"code","execution_count":null,"id":"528c5961-1455-40c6-b42e-f2c5dbc21137","metadata":{"id":"528c5961-1455-40c6-b42e-f2c5dbc21137"},"outputs":[],"source":["# Splitting the Data\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)"]},{"cell_type":"markdown","id":"3182899a-7fbb-44ce-b939-513aa5f91899","metadata":{"id":"3182899a-7fbb-44ce-b939-513aa5f91899"},"source":["### Step 4: Fit model and predict outcomes [Code]"]},{"cell_type":"code","execution_count":null,"id":"be3f5033-71ba-49ed-937c-93090c801546","metadata":{"id":"be3f5033-71ba-49ed-937c-93090c801546","outputId":"d787863a-f914-4c79-f85d-1518773f2d83","colab":{"base_uri":"https://localhost:8080/","height":74},"executionInfo":{"status":"ok","timestamp":1726378818043,"user_tz":-480,"elapsed":11,"user":{"displayName":"SHI YUN GAN","userId":"03889907775066405608"}}},"outputs":[{"output_type":"execute_result","data":{"text/plain":["KNeighborsRegressor()"],"text/html":["<style>#sk-container-id-1 {color: black;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>KNeighborsRegressor()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">KNeighborsRegressor</label><div class=\"sk-toggleable__content\"><pre>KNeighborsRegressor()</pre></div></div></div></div></div>"]},"metadata":{},"execution_count":17}],"source":["# Initialize and train the KNN model with default parameters\n","knn_default = KNeighborsRegressor()\n","knn_default.fit(X_train, y_train)"]},{"cell_type":"code","execution_count":null,"id":"92e1fc78-6c7e-492a-8192-9ca4340a0506","metadata":{"id":"92e1fc78-6c7e-492a-8192-9ca4340a0506"},"outputs":[],"source":["# Predict on the test set\n","y_pred_default = knn_default.predict(X_test)\n","y_pred = knn_default.predict(X_test)"]},{"cell_type":"markdown","id":"cca23ffd-8c68-440c-b659-62bc403bfb1d","metadata":{"id":"cca23ffd-8c68-440c-b659-62bc403bfb1d"},"source":["#### Predict data example"]},{"cell_type":"code","execution_count":null,"id":"927cf433-aa51-4e09-8d37-f9435ed5fd05","metadata":{"id":"927cf433-aa51-4e09-8d37-f9435ed5fd05","outputId":"4b3d166a-29da-4ca7-f57f-74e6788ed0e2","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1726379093188,"user_tz":-480,"elapsed":557,"user":{"displayName":"SHI YUN GAN","userId":"03889907775066405608"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["Predicted Salary for new data using the default model: 59000.00\n"]}],"source":["# Predict on a new data example\n","new_data = pd.DataFrame([[28, 'Female', \"Master's\", 3, 'Data Analyst']],\n","                        columns=['Age', 'Gender', 'Education Level', 'Years of Experience', 'Job Title'])\n","\n","# Preprocess unseen data\n","for column, le in label_encoders.items():\n","    if column in new_data.columns:\n","        new_data[column] = le.transform(new_data[column])\n","        # print(new_data[column])\n","\n","for column, scaler in scaler_columns.items():\n","    # Ensure the column exists in the unseen data\n","    if column in new_data.columns:\n","        # Apply the scaler and update the column\n","        new_data[[column]] = scaler.transform(new_data[[column]])\n","        # print(new_data[column])\n","\n","# Ensure all columns are present and in the correct order\n","new_data = new_data[X.columns]\n","\n","# Predict using the default model\n","predicted_salary_default = knn_default.predict(new_data)\n","print(f\"Predicted Salary for new data using the default model: {predicted_salary_default[0]:.2f}\")"]},{"cell_type":"markdown","id":"fbb4b752-a5de-4efd-a063-c09a8a85577f","metadata":{"id":"fbb4b752-a5de-4efd-a063-c09a8a85577f"},"source":["#### Fine-Tuning"]},{"cell_type":"code","execution_count":null,"id":"db332f74-8f69-4af3-ad98-636c68598762","metadata":{"id":"db332f74-8f69-4af3-ad98-636c68598762","outputId":"76de9684-5793-44e6-9c37-6e5f74fdeaf5","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1726379233830,"user_tz":-480,"elapsed":399,"user":{"displayName":"SHI YUN GAN","userId":"03889907775066405608"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["Best Parameters: {}\n"]}],"source":["# 2. Fine-Tune the KNN Model Using GridSearchCV\n","# Define the parameter grid\n","param_grid = {\n","    'n_neighbors': [3, 5, 7, 9, 11, 13],  # Different values of n_neighbors to test\n","    'weights': ['uniform', 'distance'],   # Use uniform or distance-based weights\n","    'metric': ['euclidean', 'manhattan']  # Different distance metrics\n","}\n","\n","# Initialize GridSearchCV\n","grid_search = GridSearchCV(KNeighborsRegressor(), param_grid, cv=5, scoring='r2')\n","\n","# Perform the grid search\n","grid_search.fit(X_train, y_train)\n","\n","# Output the best parameters\n","best_params = grid_search.best_params_\n","print(f\"Best Parameters: {best_params}\")"]},{"cell_type":"markdown","id":"3726dea4-ab0b-4573-8e6c-ca7834370cfb","metadata":{"id":"3726dea4-ab0b-4573-8e6c-ca7834370cfb"},"source":["### Step 5: Evaluate the model [Code]"]},{"cell_type":"markdown","id":"52b358d1-c8db-4873-bdbc-d38c659147f4","metadata":{"id":"52b358d1-c8db-4873-bdbc-d38c659147f4"},"source":["#### Evaluate model before fine-tuning"]},{"cell_type":"code","execution_count":null,"id":"76d325a2-1d66-4456-aa61-35affbc2d23a","metadata":{"id":"76d325a2-1d66-4456-aa61-35affbc2d23a","outputId":"bf8c84bb-b233-4298-8e1f-afef05f8a2b8","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1726379237771,"user_tz":-480,"elapsed":514,"user":{"displayName":"SHI YUN GAN","userId":"03889907775066405608"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["Before Fine-Tuning:\n","Default Model R-squared: 71.87595379419267%\n","Default Model Mean Absolute Error: 15840.933333333332\n","Default Model Mean Squared Error: 674297132.0\n"]}],"source":["# Evaluate the model before fine-tuning\n","r2_default = r2_score(y_test, y_pred_default) * 100\n","mae_default = mean_absolute_error(y_test, y_pred_default)\n","mse_default = mean_squared_error(y_test, y_pred_default)\n","\n","print(\"Before Fine-Tuning:\")\n","print(f\"Default Model R-squared: {r2_default}%\")\n","print(f\"Default Model Mean Absolute Error: {mae_default}\")\n","print(f\"Default Model Mean Squared Error: {mse_default}\")"]},{"cell_type":"markdown","id":"abb0ec72-ec3f-4a48-99ae-85b897118f04","metadata":{"id":"abb0ec72-ec3f-4a48-99ae-85b897118f04"},"source":["#### after fine-tune"]},{"cell_type":"code","execution_count":null,"id":"50d5ec93-523b-40e9-9858-062707596444","metadata":{"id":"50d5ec93-523b-40e9-9858-062707596444","outputId":"57289e56-1376-4514-91ea-225f9a70d680","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1726379240355,"user_tz":-480,"elapsed":433,"user":{"displayName":"SHI YUN GAN","userId":"03889907775066405608"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["Best Model R-squared: 71.87595379419267%\n","Best Model Mean Absolute Error: 15840.933333333332\n","Best Model Mean Squared Error: 674297132.0\n"]}],"source":["# Predict on the test set using the best model from GridSearchCV\n","best_model = grid_search.best_estimator_\n","y_pred_test = best_model.predict(X_test)\n","\n","# Calculate R-squared (R²) for the best model\n","r2_best = r2_score(y_test, y_pred_test) * 100\n","mae_best = mean_absolute_error(y_test, y_pred_test)\n","mse_best = mean_squared_error(y_test, y_pred_test)\n","\n","print(f\"Best Model R-squared: {r2_best}%\")\n","print(f\"Best Model Mean Absolute Error: {mae_best}\")\n","print(f\"Best Model Mean Squared Error: {mse_best}\")"]},{"cell_type":"markdown","id":"79e38148-b60d-4c2c-882b-f437017ad6fc","metadata":{"id":"79e38148-b60d-4c2c-882b-f437017ad6fc"},"source":["#### Comparison"]},{"cell_type":"code","execution_count":null,"id":"e250ae33-c024-418d-9f31-17b2db9039d2","metadata":{"id":"e250ae33-c024-418d-9f31-17b2db9039d2","outputId":"b00f56e4-169b-45b0-ced6-6af61048391b","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1726379242179,"user_tz":-480,"elapsed":417,"user":{"displayName":"SHI YUN GAN","userId":"03889907775066405608"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["                        Metric  Before Fine-Tuning  After Fine-Tuning\n","     Mean Absolute Error (MAE)        15840.933333       15840.933333\n","                MAE Percentage           15.459597          15.459597\n","Root Mean Squared Error (RMSE)        25967.231889       25967.231889\n","                R-squared (R2)           71.875954          71.875954\n"]}],"source":["# Results before fine-tuning\n","mae_before = mean_absolute_error(y_test, y_pred)\n","mae_percentage_before = (mae_before / y_test.mean()) * 100\n","mse_before = mean_squared_error(y_test, y_pred)\n","rmse_before = mse_before ** 0.5\n","r2_before = r2_score(y_test, y_pred) * 100\n","\n","# Results after fine-tuning\n","mae_after_knn = mean_absolute_error(y_test, y_pred_test)\n","mae_percentage_after_knn = (mae_after_knn / y_test.mean()) * 100\n","mse_after_knn = mean_squared_error(y_test, y_pred_test)\n","rmse_after_knn = mse_after_knn ** 0.5\n","r2_after_knn = r2_score(y_test, y_pred_test) * 100\n","\n","# Create a DataFrame to display the results\n","results = pd.DataFrame({\n","    'Metric': ['Mean Absolute Error (MAE)', 'MAE Percentage', 'Root Mean Squared Error (RMSE)', 'R-squared (R2)'],\n","    'Before Fine-Tuning': [mae_before, mae_percentage_before, rmse_before, r2_before],\n","    'After Fine-Tuning': [mae_after_knn, mae_percentage_after_knn, rmse_after_knn, r2_after_knn]\n","})\n","\n","# Display the DataFrame\n","print(results.to_string(index=False))"]},{"cell_type":"markdown","id":"f0e0659b-83c0-42f3-a550-9c05f16e153e","metadata":{"id":"f0e0659b-83c0-42f3-a550-9c05f16e153e"},"source":["### Step 6: Predict unseen data"]},{"cell_type":"code","execution_count":null,"id":"659f57a1-4972-45d8-ae61-a31cece8e1e0","metadata":{"id":"659f57a1-4972-45d8-ae61-a31cece8e1e0","outputId":"d846abd6-165b-4406-c2f3-06b34f7b4827","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1726379194310,"user_tz":-480,"elapsed":398,"user":{"displayName":"SHI YUN GAN","userId":"03889907775066405608"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["Predicted salary for unseen data: 65000.00\n"]}],"source":["# Sample test data\n","\n","test_data = {\n","    'Age': [28],  # Age values\n","    'Gender': ['Female'],  # Gender values\n","    'Education Level': ['Master\\'s'],  # Education levels\n","    'Job Title': ['Data Analyst'],  # Job titles\n","    'Years of Experience': [3]  # Years of experience\n","}\n","\n","# Convert to DataFrame\n","test_df = pd.DataFrame(test_data)\n","\n","# Preprocess unseen data\n","for column, le in label_encoders.items():\n","    if column in test_df.columns:\n","        test_df[column] = le.transform(test_df[column])\n","        # print(test_df[column])\n","\n","for column, scaler in scaler_columns.items():\n","    # Ensure the column exists in the unseen data\n","    if column in test_df.columns:\n","        # Apply the scaler and update the column\n","        test_df[[column]] = scaler.transform(test_df[[column]])\n","        # print(test_df[column])\n","\n","# Ensure all columns are present and in the correct order\n","test_df = test_df[X.columns]\n","\n","# Predict the salary_in_usd for new unseen data\n","predicted_salary = best_model.predict(test_df)\n","\n","print(f\"Predicted salary for unseen data: {predicted_salary[0]:.2f}\")"]},{"cell_type":"markdown","id":"432d7c06-d666-44cd-b326-9c001bf7f641","metadata":{"id":"432d7c06-d666-44cd-b326-9c001bf7f641"},"source":["### Step 7 Store the model in Joblib"]},{"cell_type":"code","execution_count":null,"id":"d5f01beb-fb2e-463d-bc8a-bffd377c5af8","metadata":{"id":"d5f01beb-fb2e-463d-bc8a-bffd377c5af8","outputId":"c1108210-0556-4548-ad1e-2d3712ffa919","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1726379197222,"user_tz":-480,"elapsed":463,"user":{"displayName":"SHI YUN GAN","userId":"03889907775066405608"}}},"outputs":[{"output_type":"execute_result","data":{"text/plain":["['knn.joblib']"]},"metadata":{},"execution_count":33}],"source":["dump(best_model, 'knn.joblib')"]},{"cell_type":"code","execution_count":null,"id":"047499db-9cf7-4f95-a4d1-c10e60710e3f","metadata":{"id":"047499db-9cf7-4f95-a4d1-c10e60710e3f"},"outputs":[],"source":["# Load the model\n","# test_best_model = load('knn.joblib')"]},{"cell_type":"code","execution_count":null,"id":"70054066-8941-450a-8c7d-5c1d058feb23","metadata":{"id":"70054066-8941-450a-8c7d-5c1d058feb23"},"outputs":[],"source":["# # Sample user input\n","# age = float(input(\"Enter Age: \"))\n","# gender = input(\"Enter Gender (Male/Female): \")\n","# education_level = input(\"Enter Education Level (e.g., Bachelor's, Master's, etc.): \")\n","# job_title = input(\"Enter Job Title (e.g., Data Scientist, Data Engineer, etc.): \")\n","# years_of_experience = float(input(\"Enter Years of Experience: \"))\n","\n","# # Create a dictionary to represent the user input\n","# entered_data = {\n","#     'Age': [age],\n","#     'Gender': [gender],\n","#     'Education Level': [education_level],\n","#     'Job Title': [job_title],\n","#     'Years of Experience': [years_of_experience]\n","# }\n","\n","# test_entered_data = pd.DataFrame(entered_data)\n","\n","# test_label_encoders = {}\n","\n","# for column in test_entered_data.select_dtypes(include=['object']).columns:\n","#     le = LabelEncoder()\n","#     test_entered_data[column] = le.fit_transform(test_entered_data[column])\n","#     test_label_encoders[column] = le\n","\n","# # Initialize StandardScaler for numerical features\n","# test_scaler = StandardScaler()\n","\n","# # Scale numerical variables\n","# for column in test_entered_data.select_dtypes(include=['float64']).columns:\n","#     test_entered_data[column] = scaler.fit_transform(test_entered_data[[column]])\n","\n","\n","# test_y_pred_test = best_model.predict(test_entered_data)\n","# print(\"\\nPredicted Salary:\", round(test_y_pred_test[0], 2))"]},{"cell_type":"markdown","id":"623ae9a7-6fbc-4e9f-92e0-faec91338348","metadata":{"id":"623ae9a7-6fbc-4e9f-92e0-faec91338348"},"source":["## Analysis the result between 3 model"]},{"cell_type":"code","execution_count":null,"id":"0034ca56-63a4-4671-900b-3d963c46ae84","metadata":{"id":"0034ca56-63a4-4671-900b-3d963c46ae84","colab":{"base_uri":"https://localhost:8080/","height":218},"executionInfo":{"status":"error","timestamp":1726379202873,"user_tz":-480,"elapsed":391,"user":{"displayName":"SHI YUN GAN","userId":"03889907775066405608"}},"outputId":"f7cceabd-b381-4e8f-ed87-6ec251cf0fbe"},"outputs":[{"output_type":"error","ename":"NameError","evalue":"name 'best_forest_model' is not defined","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-34-4ea7cfcce244>\u001b[0m in \u001b[0;36m<cell line: 2>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m models = {\n\u001b[0;32m----> 2\u001b[0;31m     \u001b[0;34m'Random Forest'\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mbest_forest_model\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m     \u001b[0;34m'Decision Tree'\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mbest_tree_model\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m     \u001b[0;34m'KNN'\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mbest_model\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m }\n","\u001b[0;31mNameError\u001b[0m: name 'best_forest_model' is not defined"]}],"source":["models = {\n","    'Random Forest': best_forest_model,\n","    'Decision Tree': best_tree_model,\n","    'KNN': best_model\n","}"]},{"cell_type":"code","execution_count":null,"id":"5979c84f-0ae5-4aee-9d07-4c55fbbe36c9","metadata":{"id":"5979c84f-0ae5-4aee-9d07-4c55fbbe36c9","outputId":"c8ff3c4a-c8bb-417d-b4f5-8ae4bba8ee3b"},"outputs":[{"name":"stdout","output_type":"stream","text":["        Model  R-Mean Absolute Error (MAE)  MAE Percentage  Root Mean Squared Error (RMSE)  R-squared (R2)\n","Random Forest                  6697.962899        6.697963                    10122.741430       95.308155\n","Decision Tree                  9993.412698        9.752843                    14471.917234       91.264684\n","          KNN                 11685.925622       11.404612                    18149.706141       86.260666\n"]}],"source":["results = {'Model': [], 'R-Mean Absolute Error (MAE)': [], 'MAE Percentage': [], 'Root Mean Squared Error (RMSE)': [], 'R-squared (R2)': []}\n","\n","for i in models:\n","    obj = models[i]\n","    obj.fit(X_train, y_train)\n","    obj_pred = obj.predict(X_test)\n","\n","    results = pd.DataFrame({\n","        'Model': ['Random Forest', 'Decision Tree', 'KNN'],\n","        'R-Mean Absolute Error (MAE)': [mae_after_rf, mae_after_dt, mae_after_knn],\n","        'MAE Percentage': [mae_percentage_after_rf, mae_percentage_after_dt, mae_percentage_after_knn],\n","        'Root Mean Squared Error (RMSE)': [rmse_after_rf, rmse_after_dt, rmse_after_knn],\n","        'R-squared (R2)': [r2_after_rf, r2_after_dt, r2_after_knn]\n","    })\n","\n","# Create a DataFrame from the results dictionary\n","results_df = pd.DataFrame(results)\n","\n","# Display the DataFrame without row numbering (index)\n","print(results_df.to_string(index=False))"]}],"metadata":{"kernelspec":{"display_name":"Python 3 (ipykernel)","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.12.4"},"colab":{"provenance":[],"collapsed_sections":["f7d0ff10-028a-453f-9e31-adca76cf2bd4"]}},"nbformat":4,"nbformat_minor":5}
