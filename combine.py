{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "562b4b26-3ad4-427d-98db-ba4616d269be",
   "metadata": {},
   "source": [
    "## Step 1: Prepare the data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "f7b6df36-6f52-4662-8a4d-3052a018a61e",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import joblib\n",
    "import seaborn as sns\n",
    "import warnings\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.model_selection import cross_val_score\n",
    "from sklearn.model_selection import GridSearchCV\n",
    "from sklearn.model_selection import cross_val_predict\n",
    "from sklearn.metrics import mean_squared_error\n",
    "from sklearn.metrics import r2_score\n",
    "from sklearn.metrics import mean_absolute_error\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.preprocessing import LabelEncoder\n",
    "from sklearn.ensemble import RandomForestRegressor\n",
    "from sklearn.impute import SimpleImputer\n",
    "from sklearn.tree import DecisionTreeRegressor\n",
    "from sklearn.neighbors import KNeighborsRegressor\n",
    "from joblib import dump, load"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "70f711c5-574d-4f15-a2ad-10fef44010d6",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Read the dataset\n",
    "data = pd.read_csv('SalaryData.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "ed49cb88-1e3e-420e-a92b-6ffb73d66348",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Age</th>\n",
       "      <th>Gender</th>\n",
       "      <th>Education Level</th>\n",
       "      <th>Job Title</th>\n",
       "      <th>Years of Experience</th>\n",
       "      <th>Salary</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>32.0</td>\n",
       "      <td>Male</td>\n",
       "      <td>Bachelor's</td>\n",
       "      <td>Software Engineer</td>\n",
       "      <td>5.0</td>\n",
       "      <td>90000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>28.0</td>\n",
       "      <td>Female</td>\n",
       "      <td>Master's</td>\n",
       "      <td>Data Analyst</td>\n",
       "      <td>3.0</td>\n",
       "      <td>65000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>45.0</td>\n",
       "      <td>Male</td>\n",
       "      <td>PhD</td>\n",
       "      <td>Senior Manager</td>\n",
       "      <td>15.0</td>\n",
       "      <td>150000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>36.0</td>\n",
       "      <td>Female</td>\n",
       "      <td>Bachelor's</td>\n",
       "      <td>Sales Associate</td>\n",
       "      <td>7.0</td>\n",
       "      <td>60000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>52.0</td>\n",
       "      <td>Male</td>\n",
       "      <td>Master's</td>\n",
       "      <td>Director</td>\n",
       "      <td>20.0</td>\n",
       "      <td>200000.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    Age  Gender Education Level          Job Title  Years of Experience  \\\n",
       "0  32.0    Male      Bachelor's  Software Engineer                  5.0   \n",
       "1  28.0  Female        Master's       Data Analyst                  3.0   \n",
       "2  45.0    Male             PhD     Senior Manager                 15.0   \n",
       "3  36.0  Female      Bachelor's    Sales Associate                  7.0   \n",
       "4  52.0    Male        Master's           Director                 20.0   \n",
       "\n",
       "     Salary  \n",
       "0   90000.0  \n",
       "1   65000.0  \n",
       "2  150000.0  \n",
       "3   60000.0  \n",
       "4  200000.0  "
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "ae1763ce-ca25-413c-ab3f-3945db469f32",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 375 entries, 0 to 374\n",
      "Data columns (total 6 columns):\n",
      " #   Column               Non-Null Count  Dtype  \n",
      "---  ------               --------------  -----  \n",
      " 0   Age                  373 non-null    float64\n",
      " 1   Gender               373 non-null    object \n",
      " 2   Education Level      373 non-null    object \n",
      " 3   Job Title            373 non-null    object \n",
      " 4   Years of Experience  373 non-null    float64\n",
      " 5   Salary               373 non-null    float64\n",
      "dtypes: float64(3), object(3)\n",
      "memory usage: 17.7+ KB\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "Age                    2\n",
       "Gender                 2\n",
       "Education Level        2\n",
       "Job Title              2\n",
       "Years of Experience    2\n",
       "Salary                 2\n",
       "dtype: int64"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.info()\n",
    "data.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "f9c34539-ecb6-47de-93f4-93bd07207df8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Age</th>\n",
       "      <th>Years of Experience</th>\n",
       "      <th>Salary</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>373.000000</td>\n",
       "      <td>373.000000</td>\n",
       "      <td>373.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>37.431635</td>\n",
       "      <td>10.030831</td>\n",
       "      <td>100577.345845</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>7.069073</td>\n",
       "      <td>6.557007</td>\n",
       "      <td>48240.013482</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>23.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>350.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>31.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>55000.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>36.000000</td>\n",
       "      <td>9.000000</td>\n",
       "      <td>95000.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>44.000000</td>\n",
       "      <td>15.000000</td>\n",
       "      <td>140000.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>53.000000</td>\n",
       "      <td>25.000000</td>\n",
       "      <td>250000.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              Age  Years of Experience         Salary\n",
       "count  373.000000           373.000000     373.000000\n",
       "mean    37.431635            10.030831  100577.345845\n",
       "std      7.069073             6.557007   48240.013482\n",
       "min     23.000000             0.000000     350.000000\n",
       "25%     31.000000             4.000000   55000.000000\n",
       "50%     36.000000             9.000000   95000.000000\n",
       "75%     44.000000            15.000000  140000.000000\n",
       "max     53.000000            25.000000  250000.000000"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "f5a700c3-fc18-4fcd-bf0c-870a6f573d4e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 2000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#the number of occurrences of every Age\n",
    "plt.figure(figsize=(20, 6))\n",
    "sns.countplot(data=data,x='Age')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "ae938dd0-8543-439f-90fa-2da8dd2d48ad",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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UVFRFBUVbdmBAQAAAACAJi+nd6KklOLCCy+MSZMmxdNPPx1du3at8XrXrl2jpKQkpkyZUr1t9erVUVFREQcffPDWHhcAAAAAANiG5PROlGHDhsV9990Xv//976O4uLj6M1DatWsXrVq1ioKCghg+fHhcc8010a1bt+jWrVtcc8010bp16zj11FNzOToAAAAAANDE5bREmTBhQkREHHrooTW233333TF06NCIiLj88svj448/jgsuuCCWLl0aBx54YEyePDmKi4u38rQAAAAAAMC2JKclSkppo2sKCgpi7NixMXbs2C0/EAAAAAAAwP+T089EAQAAAAAAaKyUKAAAAAAAABmUKAAAAAAAABmUKAAAAAAAABmUKAAAAAAAABmUKAAAAAAAABmUKAAAAAAAABmUKAAAAAAAABmUKAAAAAAAABmUKAAAAAAAABmUKAAAAAAAABmUKAAAAAAAABmUKAAAAAAAABmUKAAAAAAAABmUKAAAAAAAABmUKAAAAAAAABmUKAAAAAAAABmUKAAAAAAAABmUKAAAAAAAABmUKAAAAAAAABmUKAAAAAAAABkKcz0AAMCm6DVyYq5HaJDK8WfkegS2Av9dAtSP/18CAPnCnSgAAAAAAAAZlCgAAAAAAAAZlCgAAAAAAAAZlCgAAAAAAAAZlCgAAAAAAAAZlCgAAAAAAAAZlCgAAAAAAAAZNqlE6d+/f3zwwQcbbF++fHn079//X50JAAAAAAAg5zapRJk2bVqsXr16g+2ffPJJPPPMM//yUAAAAAAAALlW2JDFL730UvWvX3311Vi8eHH187Vr18YTTzwRu+yyy+abDgAAAAAAIEcaVKJ85StfiYKCgigoKMh8265WrVrFL3/5y802HAAAAAAAQK40qESpqqqKlFLstttu8cILL8TOO+9c/VqLFi2iQ4cO0axZs80+JAAAAAAAwNbWoBKlvLw8IiLWrVu3RYYBAAAAAABoLBpUonzea6+9FtOmTYslS5ZsUKr86Ec/+pcHA4CtodfIibkeoUEqx5+R6xEAAAAAthmbVKLccccdcf7550f79u2jpKQkCgoKql8rKChQogAAAAAAAHlvk0qUf//3f4+f/vSnMWrUqM09DwAAAAAAQKOw3abstHTp0jjppJM29ywAAAAAAACNxiaVKCeddFJMnjx5c88CAAAAAADQaGzS23ntvvvu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rshcf/nll6c999yzxrZzzz03HXTQQVtsxk3V0GxTp05NEZGWLl26FabbfCIiPfTQQ3Wuyafz9nn1yZav5y2llJYsWZIiIlVUVNS6Jl/PXUop7bDDDuk//uM/Ml/Lx1wrVqxI3bp1S1OmTEn9+vVLl1xySa1r8ynfVVddlfbbb796r8+nbCmlNGrUqNS3b98G7ZNvGde75JJL0pe//OW0bt26zNfzKdc3v/nNdOaZZ9bYNmjQoPTd73631n3yJd9HH32UmjVrlh599NEa2/fbb7905ZVXZu6TL9m++HV73bp1qaSkJF177bXV2z755JPUrl27dNttt9V6nO985zvp6KOPrrHtqKOOSieffPJmn7m+6romqaqqShGRZs+evdHjNMZsKdXvmuuFF15IEZHeeuutWtc0xnz1ybZs2bIUEemPf/xjrWvyKdvf/va3tMsuu6SXX345lZeXpxtvvLHO4zTGbCll5xsyZEg6/vjjG3ScxpgvK9vgwYPr/DqXpTFmS6l+f++OP/741L9//zrXNMZ8Wdn22Wef9OMf/7jGtv333z/98Ic/rPU4+ZBt/vz5KSLSyy+/XL3t008/TTvuuGO64447aj1OY8yW0obffzel65S6frbQFK5T6vOzk3y9TqlPtny9TqktW1O5TsnKl0/XKe5EaYDVq1dHZWVlDBgwoMb2AQMGxPPPP5+5z5/+9KcN1h911FExa9asWLNmzRabtaE2Jdt6X/3qV6O0tDQOP/zwmDp16pYcc6vJl/P2r8jH87Zs2bKIiNhxxx1rXZOP527t2rVx//33x8qVK6NPnz6Za/Ix17Bhw+Kb3/xmHHHEERtdm2/5FixYEGVlZdG1a9c4+eST44033qh1bb5le+SRR6J3795x0kknRYcOHeKrX/1q3HHHHXXuk28ZIz77unfvvffGmWeeGQUFBZlr8ilX375946mnnorXXnstIiL+8pe/xLPPPhvHHHNMrfvkS75PP/001q5du8G/LG7VqlU8++yzmfvkS7YvqqqqisWLF9eYvaioKPr161fn9VhteTd2DZcP8jnbsmXLoqCgoM47+fIx3+rVq+P222+Pdu3axX777VfrunzJtm7dujj99NNj5MiRsc8++9Rrn3zJtt60adOiQ4cO0b179zjnnHNiyZIlda7Ph3zr1q2Lxx57LLp37x5HHXVUdOjQIQ488MCNvrVxPmTL8u6778Zjjz0WZ511Vp3r8iVf375945FHHom///3vkVKKqVOnxmuvvRZHHXVUrfvkQ7ZVq1ZFRNS4ZmnWrFm0aNGi1muWiMab7Yvffzel65T6/GyhPhpjtoj65cvX65SNZcvn65SsbE3pOqW2c5cv1ylKlAZ47733Yu3atdGxY8ca2zt27BiLFy/O3Gfx4sWZ6z/99NN47733ttisDbUp2UpLS+P222+PBx98MCZNmhR77LFHHH744TF9+vStMfIWlS/nbVPk63lLKcWIESOib9++0aNHj1rX5dO5mzt3bmy//fZRVFQU5513Xjz00EOx9957Z67Np1wREffff3+8+OKLMW7cuHqtz6d8Bx54YEycODGefPLJuOOOO2Lx4sVx8MEHx/vvv5+5Pp+yRUS88cYbMWHChOjWrVs8+eSTcd5558XFF18cEydOrHWffMsY8dnt0B988EEMHTq01jX5lGvUqFFxyimnxJ577hnNmzePr371qzF8+PA45ZRTat0nX/IVFxdHnz594ic/+Um88847sXbt2rj33nvjz3/+cyxatChzn3zJ9kXrr7kacj22fr+G7pMv8jXbJ598EldccUWceuqp0bZt21rX5VO+Rx99NLbffvto2bJl3HjjjTFlypRo3759revzJdt1110XhYWFcfHFF9d7n3zJFhExcODA+M1vfhNPP/10/PznP4+ZM2dG//79q3/YmyUf8i1ZsiQ+/PDDuPbaa+Poo4+OyZMnx4knnhiDBg2KioqKWvfLh2xZ7rnnniguLo5BgwbVuS5f8v3iF7+IvffeOzp16hQtWrSIo48+Om699dbo27dvrfvkQ7Y999wzysvLY/To0bF06dJYvXp1XHvttbF48eJar1kiGme2rO+/m8p1Sn1/tlAfjS1bRP3y5et1Sl3Z8v06pbZsTeU6pbZ8+XSdUrhFj95EffFfrKaUav1XrLWtz9reGDQk2x577BF77LFH9fM+ffrEwoUL42c/+1kccsghW3TOrSGfzltD5Ot5u/DCC+Oll16q81/wrJcv526PPfaIOXPmxAcffBAPPvhgDBkyJCoqKmotUvIl18KFC+OSSy6JyZMn1/me1F+UL/kGDhxY/euePXtGnz594stf/nLcc889MWLEiMx98iVbxGf/0qV3795xzTXXRMRnd6298sorMWHChDjjjDNq3S+fMkZE3HnnnTFw4MCNvqdsvuR64IEH4t5774377rsv9tlnn5gzZ04MHz48ysrKYsiQIbXuly/5fv3rX8eZZ54Zu+yySzRr1iz233//OPXUU+PFF1+sdZ98yZalodeam7pPvsi3bGvWrImTTz451q1bF7feeutG1+dLvsMOOyzmzJkT7733Xtxxxx3V7z3doUOHWvdp7NkqKyvj5ptvjhdffLHBczX2bOsNHjy4+tc9evSI3r17R3l5eTz22GN1/kC+sedbt25dREQcf/zxcemll0ZExFe+8pV4/vnn47bbbot+/frVum9jz5blrrvuitNOO61e19b5kO8Xv/hFzJgxIx555JEoLy+P6dOnxwUXXBClpaV13sXe2LM1b948HnzwwTjrrLNixx13jGbNmsURRxxR4/uH2jS2bHV9/53v1ykN+dlCfTSmbBEbz5fP1yl1Zcv365SsbE3pOqW2c5dP1ynuRGmA9u3bR7NmzTZotpYsWbJBA7ZeSUlJ5vrCwsLYaaedttisDbUp2bIcdNBBsWDBgs093laXL+dtc2ns5+2iiy6KRx55JKZOnRqdOnWqc20+nbsWLVrE7rvvHr17945x48bFfvvtFzfffHPm2nzKVVlZGUuWLIlevXpFYWFhFBYWRkVFRfziF7+IwsLCWLt27Qb75FO+L2rTpk307Nmz1r9D+ZattLR0gyJvr732irfffrvWffIt41tvvRV//OMf4+yzz65zXT7lGjlyZFxxxRVx8sknR8+ePeP000+PSy+9tM67wfIp35e//OWoqKiIDz/8MBYuXBgvvPBCrFmzJrp27Zq5Pp+yfV5JSUlERIOvx2rL25BruMYq37KtWbMmvvOd70RVVVVMmTKlzn/dGZFf+dq0aRO77757HHTQQXHnnXdGYWFh3HnnnbWuz4dszzzzTCxZsiR23XXX6muWt956Ky677LLo0qVLrfvlQ7balJaWRnl5eZ3X/vmQr3379lFYWLjZrlkaU7YveuaZZ2L+/PkbvW6JyI98H3/8cfzgBz+IG264IY499tjYd99948ILL4zBgwfHz372s1r3y4dsERG9evWq/odyixYtiieeeCLef//9Wq9ZIhpfttq+/24K1ykN+dlCfTSmbBEbz5fP1ykby5bP1ym1ZWsq1ykN+XvXmK9TlCgN0KJFi+jVq1dMmTKlxvYpU6bEwQcfnLlPnz59Nlg/efLk6N27dzRv3nyLzdpQm5Ity+zZs6O0tHRzj7fV5ct521wa63lLKcWFF14YkyZNiqeffrrOC8/18vncpZRqvWUxn3IdfvjhMXfu3JgzZ071o3fv3nHaaafFnDlzolmzZhvsk0/5vmjVqlUxb968Wv8O5Vu2r3/96zF//vwa21577bUoLy+vdZ98y3j33XdHhw4d4pvf/Gad6/Ip10cffRTbbVfzsq5Zs2bV/1I3Sz7lW69NmzZRWloaS5cujSeffDKOP/74zHX5mC0iomvXrlFSUlJj9tWrV0dFRUWd12O15W3INVxjlU/Z1v9gYsGCBfHHP/6xXoVdPuX7orquWyLyI9vpp58eL730Uo1rlrKyshg5cmQ8+eSTte6XD9lq8/7778fChQvrvPbPh3wtWrSIAw44YLNdszSmbF905513Rq9evep8b//18iHfmjVrYs2aNZvtuqUxZfu8du3axc477xwLFiyIWbNm1XrNEtF4sm3s++98vk7ZlJ8t1EdjyBZRv3z5ep2yqecuH65TNpYt369TNuXcNerrlM3/WfVN2/3335+aN2+e7rzzzvTqq6+m4cOHpzZt2qQ333wzpZTSFVdckU4//fTq9W+88UZq3bp1uvTSS9Orr76a7rzzztS8efP0X//1X7mKUKuGZrvxxhvTQw89lF577bX08ssvpyuuuCJFRHrwwQdzFaFWK1asSLNnz06zZ89OEZFuuOGGNHv27PTWW2+llPL7vDU0Wz6dt/PPPz+1a9cuTZs2LS1atKj68dFHH1WvyddzN3r06DR9+vRUVVWVXnrppfSDH/wgbbfddmny5MkppfzNVZt+/fqlSy65pPp5Pue77LLL0rRp09Ibb7yRZsyYkb71rW+l4uLiJvF1IKWUXnjhhVRYWJh++tOfpgULFqTf/OY3qXXr1unee++tXpPPGdeuXZt23XXXNGrUqA1ey+dcQ4YMSbvsskt69NFHU1VVVZo0aVJq3759uvzyy6vX5HO+J554Iv3hD39Ib7zxRpo8eXLab7/90te+9rW0evXqlFJ+ZdvY1+1rr702tWvXLk2aNCnNnTs3nXLKKam0tDQtX768+hinn356uuKKK6qfP/fcc6lZs2bp2muvTfPmzUvXXnttKiwsTDNmzGhU2d5///00e/bs9Nhjj6WISPfff3+aPXt2WrRoUaPPtrF8a9asSccdd1zq1KlTmjNnTo3rllWrVjX6fHVl+/DDD9Po0aPTn/70p/Tmm2+mysrKdNZZZ6WioqL08ssv53W2LOXl5enGG2+ssa2xZkup7nwrVqxIl112WXr++edTVVVVmjp1aurTp0/aZZddmsT/UyZNmpSaN2+ebr/99rRgwYL0y1/+MjVr1iw988wzjT5bffKllNKyZctS69at04QJEzKP0VjzbSxbv3790j777JOmTp2a3njjjXT33Xenli1bpltvvTXvs/32t79NU6dOTa+//np6+OGHU3l5eRo0aFCNYzTWbPX5/jtfr1Pqky2fr1M2li+fr1M2li2fr1Pq89/lF+XTdcrG8uXbdYoSZRP87//9v1N5eXlq0aJF2n///VNFRUX1a0OGDEn9+vWrsX7atGnpq1/9amrRokXq0qVLrRdAjUFDsl133XXpy1/+cmrZsmXaYYcdUt++fdNjjz2Wg6k3burUqSkiNngMGTIkpZTf562h2fLpvGXlioh09913V6/J13N35plnVv9d23nnndPhhx9eXaCklL+5avPFEiWf8w0ePDiVlpam5s2bp7KysjRo0KD0yiuvVL+ez9nW++///u/Uo0ePVFRUlPbcc890++2313g9nzM++eSTKSLS/PnzN3gtn3MtX748XXLJJWnXXXdNLVu2TLvttlu68sora3xTlM/5HnjggbTbbrulFi1apJKSkjRs2LD0wQcfVL+eT9k29nV73bp16aqrrkolJSWpqKgoHXLIIWnu3Lk1jtGvX7/q9ev97ne/S3vssUdq3rx52nPPPXPyjyM2lu3uu+/OfP2qq66qPkZjzZZS3fmqqqpqvW6ZOnVq9TEaa766sn388cfpxBNPTGVlZalFixaptLQ0HXfccemFF16ocYx8zJYl64cTjTVbSnXn++ijj9KAAQPSzjvvnJo3b5523XXXNGTIkPT222/XOEZjzVefc3fnnXem3XffPbVs2TLtt99+6eGHH65xjMaaLaX65fvVr36VWrVqVeNr3uc11nwby7Zo0aI0dOjQVFZWllq2bJn22GOP9POf/zytW7eu+hj5mu3mm29OnTp1qv4798Mf/rDG9VhKjTdbfb7/ztfrlPpky+frlI3ly+frlI1ly+frlPr8d/lF+XSdsrF8+XadUvD/QgEAAAAAAPA5PhMFAAAAAAAggxIFAAAAAAAggxIFAAAAAAAggxIFAAAAAAAggxIFAAAAAAAggxIFAAAAAAAggxIFAAAAAAAggxIFAADICw8//HDsvvvu0axZsxg+fHiux9kkXbp0iZtuuinXYwAAAPWkRAEAgCYspRRHHHFEHHXUURu8duutt0a7du3i7bffzsFkDXfuuefGv/3bv8XChQvjJz/5SeaaLl26REFBwQaPa6+9ditPm23mzJnxve99L9djAAAA9VSQUkq5HgIAANhyFi5cGD179ozrrrsuzj333IiIqKqqin333Td++ctfxtChQzfr77dmzZpo3rz5Zj3mhx9+GMXFxfH000/HYYcdVuu6Ll26xFlnnRXnnHNOje3FxcXRpk2bzTpTQ6xevTpatGiRs98fAADYNO5EAQCAJq5z585x8803x/e///2oqqqKlFKcddZZcfjhh8fXvva1OOaYY2L77bePjh07xumnnx7vvfde9b5PPPFE9O3bN770pS/FTjvtFN/61rfi9ddfr379zTffjIKCgvjtb38bhx56aLRs2TLuvffeeOutt+LYY4+NHXbYIdq0aRP77LNPPP7447XOuHTp0jjjjDNihx12iNatW8fAgQNjwYIFERExbdq0KC4ujoiI/v37R0FBQUybNq3WYxUXF0dJSUmNx/oC5cc//nGUlZXF+++/X73+uOOOi0MOOSTWrVsXEREFBQUxYcKEGDhwYLRq1Sq6du0av/vd72r8Hn//+99j8ODBscMOO8ROO+0Uxx9/fLz55pvVrw8dOjROOOGEGDduXJSVlUX37t0jYsO381q2bFl873vfiw4dOkTbtm2jf//+8Ze//KX69bFjx8ZXvvKV+PWvfx1dunSJdu3axcknnxwrVqyoXrNu3bq47rrrYvfdd4+ioqLYdddd46c//Wm9ZwUAAGqnRAEAgG3AkCFD4vDDD4//9b/+V9xyyy3x8ssvx8033xz9+vWLr3zlKzFr1qx44okn4t13343vfOc71futXLkyRowYETNnzoynnnoqtttuuzjxxBOrC4f1Ro0aFRdffHHMmzcvjjrqqBg2bFisWrUqpk+fHnPnzo3rrrsutt9++1rnGzp0aMyaNSseeeSR+NOf/hQppTjmmGNizZo1cfDBB8f8+fMjIuLBBx+MRYsWxcEHH7xJfw5XXnlldOnSJc4+++yIiLjtttti+vTp8etf/zq22+7/f3s0ZsyY+Pa3vx1/+ctf4rvf/W6ccsopMW/evIiI+Oijj+Kwww6L7bffPqZPnx7PPvtsbL/99nH00UfH6tWrq4/x1FNPxbx582LKlCnx6KOPbjBLSim++c1vxuLFi+Pxxx+PysrK2H///ePwww+Pf/7zn9XrXn/99Xj44Yfj0UcfjUcffTQqKipqvD3Z6NGj47rrrosxY8bEq6++Gvfdd1907NixQbMCAAC1SAAAwDbh3XffTTvvvHPabrvt0qRJk9KYMWPSgAEDaqxZuHBhiog0f/78zGMsWbIkRUSaO3duSimlqqqqFBHppptuqrGuZ8+eaezYsfWa67XXXksRkZ577rnqbe+9915q1apV+u1vf5tSSmnp0qUpItLUqVPrPFZ5eXlq0aJFatOmTY3H5/d7/fXXU3FxcRo1alRq3bp1uvfee2scIyLSeeedV2PbgQcemM4///yUUkp33nln2mOPPdK6deuqX1+1alVq1apVevLJJ1NKKQ0ZMiR17NgxrVq1aoP5brzxxpRSSk899VRq27Zt+uSTT2qs+fKXv5x+9atfpZRSuuqqq1Lr1q3T8uXLq18fOXJkOvDAA1NKKS1fvjwVFRWlO+64I/PPoz6zAgAAtSvMZYEDAABsPR06dIjvfe978fDDD8eJJ54Y//Ef/xFTp07NvEPk9ddfj+7du8frr78eY8aMiRkzZsR7771XfQfK22+/HT169Khe37t37xr7X3zxxXH++efH5MmT44gjjohvf/vbse+++2bONW/evCgsLIwDDzywettOO+0Ue+yxR/XdHw0xcuTIDT7nZZdddqn+9W677RY/+9nP4txzz43BgwfHaaedtsEx+vTps8HzOXPmREREZWVl/PWvf61+i7H1PvnkkxpvddazZ886PwelsrIyPvzww9hpp51qbP/4449rHKdLly41fq/S0tJYsmRJRHz2Z7dq1ao4/PDDa/096jMrAACQTYkCAADbkMLCwigs/OzbgHXr1sWxxx4b11133QbrSktLIyLi2GOPjc6dO8cdd9wRZWVlsW7duujRo8cGbwX1xQ9tP/vss+Ooo46Kxx57LCZPnhzjxo2Ln//853HRRRdt8HullDJnTSlFQUFBgzO2b98+dt999zrXTJ8+PZo1axZvvvlmfPrpp9V/JnVZP8u6deuiV69e8Zvf/GaDNTvvvHP1rzf2Qfbr1q2L0tLSzM93+dKXvlT96+bNm28wx/oyq1WrVhv9PeozKwAAkM1nogAAwDZq//33j1deeSW6dOkSu+++e41HmzZt4v3334958+bFD3/4wzj88MNjr732iqVLl9b7+J07d47zzjsvJk2aFJdddlnccccdmev23nvv+PTTT+PPf/5z9bb3338/Xnvttdhrr73+5Zxf9MADD8SkSZNi2rRpsXDhwvjJT36ywZoZM2Zs8HzPPfeMiM/+3BYsWBAdOnTY4M+tXbt29Z5j//33j8WLF0dhYeEGx2nfvn29jtGtW7do1apVPPXUU7X+HptjVgAA2FYpUQAAYBs1bNiw+Oc//xmnnHJKvPDCC/HGG2/E5MmT48wzz4y1a9fGDjvsEDvttFPcfvvt8de//jWefvrpGDFiRL2OPXz48HjyySejqqoqXnzxxXj66adrLUS6desWxx9/fJxzzjnx7LPPVn+Y+y677BLHH398g3OtWLEiFi9eXOOxfPnyiIj429/+Fueff35cd9110bdv3/jP//zPGDdu3Aalye9+97u466674rXXXourrroqXnjhhbjwwgsjIuK0006L9u3bx/HHHx/PPPNMVFVVRUVFRVxyySXxt7/9rd5zHnHEEdGnT5844YQT4sknn4w333wznn/++fjhD38Ys2bNqtcxWrZsGaNGjYrLL788Jk6cGK+//nrMmDEj7rzzzs06KwAAbKuUKAAAsI0qKyuL5557LtauXRtHHXVU9OjRIy655JJo165dbLfddrHddtvF/fffH5WVldGjR4+49NJLY/z48fU69tq1a2PYsGGx1157xdFHHx177LFH3HrrrbWuv/vuu6NXr17xrW99K/r06RMppXj88cc3eCur+vjRj34UpaWlNR6XX355pJRi6NCh8bWvfa26EDnyyCPjwgsvjO9+97vx4YcfVh/j6quvjvvvvz/23XffuOeee+I3v/lN7L333hER0bp165g+fXrsuuuuMWjQoNhrr73izDPPjI8//jjatm1b7zkLCgri8ccfj0MOOSTOPPPM6N69e5x88snx5ptvRseOHet9nDFjxsRll10WP/rRj2KvvfaKwYMHV39myuaaFQAAtlUFqbY3IAYAANgGFRQUxEMPPRQnnHBCrkcBAAByzJ0oAAAAAAAAGZQoAAAAAAAAGQpzPQAAAEBj4h2PAQCA9dyJAgAAAAAAkEGJAgAAAAAAkEGJAgAAAAAAkEGJAgAAAAAAkEGJAgAAAAAAkEGJAgAAAAAAkEGJAgAAAAAAkEGJAgAAAAAAkEGJAgAAAAAAkOH/Arxu3m+T7kioAAAAAElFTkSuQmCC",
      "text/plain": [
       "<Figure size 2000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#the number of occurrences of every Years of Experience\n",
    "plt.figure(figsize=(20, 6))\n",
    "sns.countplot(data=data,x='Years of Experience')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "2a7189e3-a8c7-4304-a207-9132a3540c0a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 2000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#average salary for particular age\n",
    "plt.figure(figsize=(20, 6))\n",
    "\n",
    "sns.barplot(x='Age', y='Salary', data=data)\n",
    "\n",
    "plt.title('Salary Distribution by Age')\n",
    "plt.xlabel('Age')\n",
    "plt.ylabel('Salary')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "f30c2936-d6de-4efb-946c-da101081230c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 2000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#average salary for particular year of experience\n",
    "plt.figure(figsize=(20, 6))\n",
    "\n",
    "sns.barplot(x='Years of Experience', y='Salary', data=data)\n",
    "\n",
    "plt.title('Salary Distribution by Years of Experience')\n",
    "plt.xlabel('Years of Experience')\n",
    "plt.ylabel('Salary')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "e2336e3c-956d-48f7-8801-8a55ae824b6b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 2000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#displays the median (the central line inside the box) of the salary for each age group\n",
    "plt.figure(figsize=(20, 6))\n",
    "\n",
    "sns.boxplot(x='Age', y='Salary', data=data)\n",
    "\n",
    "plt.title('Salary Accourding To Age')\n",
    "plt.xlabel('Age')\n",
    "plt.ylabel('Salary')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "243b827b-eafc-4b20-bc1a-a53cce671a68",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 2000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#displays the median (the central line inside the box) of the salary for each year of experience group\n",
    "plt.figure(figsize=(20, 6))\n",
    "\n",
    "sns.boxplot(x='Years of Experience', y='Salary', data=data)\n",
    "\n",
    "plt.title('Salary Accourding To Years of Experience')\n",
    "plt.xlabel('Years of Experience')\n",
    "plt.ylabel('Salary')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7dd79157-eca0-4664-8bfb-4b11d9189d61",
   "metadata": {},
   "source": [
    "### Data Preprocessing"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "65250118-9f0a-4fae-8c04-f69f3738c62e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Age                    0\n",
       "Gender                 0\n",
       "Education Level        0\n",
       "Job Title              0\n",
       "Years of Experience    0\n",
       "Salary                 0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Impute missing numeric values (mean) and drop rows with missing categorical values\n",
    "numeric_features = ['Age', 'Years of Experience']\n",
    "categorical_features = ['Gender', 'Education Level', 'Job Title']\n",
    "\n",
    "# Impute missing numeric values with mean\n",
    "imputer = SimpleImputer(strategy='mean')\n",
    "data[numeric_features] = imputer.fit_transform(data[numeric_features])\n",
    "\n",
    "# Drop rows with missing categorical values (as the dataset is small)\n",
    "data.dropna(subset=categorical_features, inplace=True)\n",
    "\n",
    "# Drop rows where the target 'Salary' is missing\n",
    "data.dropna(subset=['Salary'], inplace=True)\n",
    "data.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "4b82a8d1-f506-4a39-bed4-4b7fc21a428d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Age</th>\n",
       "      <th>Gender</th>\n",
       "      <th>Education Level</th>\n",
       "      <th>Job Title</th>\n",
       "      <th>Years of Experience</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>32.0</td>\n",
       "      <td>Male</td>\n",
       "      <td>Bachelor's</td>\n",
       "      <td>Software Engineer</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>28.0</td>\n",
       "      <td>Female</td>\n",
       "      <td>Master's</td>\n",
       "      <td>Data Analyst</td>\n",
       "      <td>3.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>45.0</td>\n",
       "      <td>Male</td>\n",
       "      <td>PhD</td>\n",
       "      <td>Senior Manager</td>\n",
       "      <td>15.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>36.0</td>\n",
       "      <td>Female</td>\n",
       "      <td>Bachelor's</td>\n",
       "      <td>Sales Associate</td>\n",
       "      <td>7.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>52.0</td>\n",
       "      <td>Male</td>\n",
       "      <td>Master's</td>\n",
       "      <td>Director</td>\n",
       "      <td>20.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>370</th>\n",
       "      <td>35.0</td>\n",
       "      <td>Female</td>\n",
       "      <td>Bachelor's</td>\n",
       "      <td>Senior Marketing Analyst</td>\n",
       "      <td>8.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>371</th>\n",
       "      <td>43.0</td>\n",
       "      <td>Male</td>\n",
       "      <td>Master's</td>\n",
       "      <td>Director of Operations</td>\n",
       "      <td>19.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>372</th>\n",
       "      <td>29.0</td>\n",
       "      <td>Female</td>\n",
       "      <td>Bachelor's</td>\n",
       "      <td>Junior Project Manager</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>373</th>\n",
       "      <td>34.0</td>\n",
       "      <td>Male</td>\n",
       "      <td>Bachelor's</td>\n",
       "      <td>Senior Operations Coordinator</td>\n",
       "      <td>7.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>374</th>\n",
       "      <td>44.0</td>\n",
       "      <td>Female</td>\n",
       "      <td>PhD</td>\n",
       "      <td>Senior Business Analyst</td>\n",
       "      <td>15.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>373 rows × 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      Age  Gender Education Level                      Job Title  \\\n",
       "0    32.0    Male      Bachelor's              Software Engineer   \n",
       "1    28.0  Female        Master's                   Data Analyst   \n",
       "2    45.0    Male             PhD                 Senior Manager   \n",
       "3    36.0  Female      Bachelor's                Sales Associate   \n",
       "4    52.0    Male        Master's                       Director   \n",
       "..    ...     ...             ...                            ...   \n",
       "370  35.0  Female      Bachelor's       Senior Marketing Analyst   \n",
       "371  43.0    Male        Master's         Director of Operations   \n",
       "372  29.0  Female      Bachelor's         Junior Project Manager   \n",
       "373  34.0    Male      Bachelor's  Senior Operations Coordinator   \n",
       "374  44.0  Female             PhD        Senior Business Analyst   \n",
       "\n",
       "     Years of Experience  \n",
       "0                    5.0  \n",
       "1                    3.0  \n",
       "2                   15.0  \n",
       "3                    7.0  \n",
       "4                   20.0  \n",
       "..                   ...  \n",
       "370                  8.0  \n",
       "371                 19.0  \n",
       "372                  2.0  \n",
       "373                  7.0  \n",
       "374                 15.0  \n",
       "\n",
       "[373 rows x 5 columns]"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#drop salary in X, and put it as y\n",
    "X = data.drop('Salary', axis=1)\n",
    "y = data['Salary']\n",
    "X"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "8d6bb20d-0413-4727-bb1f-12b112696aa2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Age</th>\n",
       "      <th>Gender</th>\n",
       "      <th>Education Level</th>\n",
       "      <th>Job Title</th>\n",
       "      <th>Years of Experience</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>-0.769398</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>159</td>\n",
       "      <td>-0.768276</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>-1.336003</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>17</td>\n",
       "      <td>-1.073702</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1.072068</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>130</td>\n",
       "      <td>0.758859</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>-0.202793</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>101</td>\n",
       "      <td>-0.462849</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2.063627</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>22</td>\n",
       "      <td>1.522426</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>370</th>\n",
       "      <td>-0.344444</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>131</td>\n",
       "      <td>-0.310135</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>371</th>\n",
       "      <td>0.788766</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>30</td>\n",
       "      <td>1.369713</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>372</th>\n",
       "      <td>-1.194352</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>70</td>\n",
       "      <td>-1.226416</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>373</th>\n",
       "      <td>-0.486096</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>137</td>\n",
       "      <td>-0.462849</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>374</th>\n",
       "      <td>0.930417</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>110</td>\n",
       "      <td>0.758859</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>373 rows × 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "          Age  Gender  Education Level  Job Title  Years of Experience\n",
       "0   -0.769398       1                0        159            -0.768276\n",
       "1   -1.336003       0                1         17            -1.073702\n",
       "2    1.072068       1                2        130             0.758859\n",
       "3   -0.202793       0                0        101            -0.462849\n",
       "4    2.063627       1                1         22             1.522426\n",
       "..        ...     ...              ...        ...                  ...\n",
       "370 -0.344444       0                0        131            -0.310135\n",
       "371  0.788766       1                1         30             1.369713\n",
       "372 -1.194352       0                0         70            -1.226416\n",
       "373 -0.486096       1                0        137            -0.462849\n",
       "374  0.930417       0                2        110             0.758859\n",
       "\n",
       "[373 rows x 5 columns]"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#encoding categorical variables and standardizing numerical variables \n",
    "label_encoders = {}\n",
    "scaler_columns={}    \n",
    "\n",
    "# Encode categorical variables using Label Encoding\n",
    "for column in X.select_dtypes(include=['object']).columns:\n",
    "    le = LabelEncoder()\n",
    "    X[column] = le.fit_transform(X[column])\n",
    "    label_encoders[column] = le\n",
    "\n",
    "# standardize numerical variable\n",
    "for column in X.select_dtypes(include=['float64']).columns:\n",
    "    scaler = StandardScaler()\n",
    "    X[column] = scaler.fit_transform(X[[column]])\n",
    "    scaler_columns[column] = scaler\n",
    "X"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "85bbc36b-4f3b-4d1f-a0d6-b132428b127a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Encoding for column: Gender\n",
      "Count for column: 2 \n",
      "\n",
      "Encoding for column: Education Level\n",
      "Count for column: 3 \n",
      "\n",
      "Encoding for column: Job Title\n",
      "Count for column: 174 \n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Print the encoding mapping for each categorical column\n",
    "count = 0\n",
    "for column, le in label_encoders.items():\n",
    "    count = 0\n",
    "    print(f\"Encoding for column: {column}\")\n",
    "    for idx, class_ in enumerate(le.classes_):\n",
    "        # print(f\"  {class_}: {idx}\")\n",
    "        count+=1\n",
    "    print(f\"Count for column: {count} \\n\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "88b4c8c5-8a12-4ae7-99a5-abcacd7c7d3a",
   "metadata": {},
   "source": [
    "## Random Forest"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4db4e92e-9208-411c-925e-99eebf3eb1df",
   "metadata": {},
   "source": [
    "### Step 2 & 3 : Feature Extraction and Split the data (into training and testing set)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "a1319ce0-7f71-4b43-8753-780603497614",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(298, 5)\n",
      "(298,)\n",
      "(75, 5)\n",
      "(75,)\n",
      "          Age  Gender  Education Level  Job Title  Years of Experience\n",
      "329  1.497022       1                1         29             1.675140\n",
      "33   0.222161       0                0         84            -0.004708\n",
      "15   0.930417       1                0         89             0.911572\n",
      "316 -0.486096       0                1        117            -0.615562\n",
      "57   0.788766       1                2        116             1.064286\n",
      "..        ...     ...              ...        ...                  ...\n",
      "94  -0.627747       1                0          3            -0.462849\n",
      "196  0.505463       0                0        132             0.148005\n",
      "313 -0.627747       1                0         49            -0.920989\n",
      "294  1.072068       0                1        122             0.606145\n",
      "349 -0.202793       1                0        111            -0.310135\n",
      "\n",
      "[75 rows x 5 columns]\n",
      "329    180000.0\n",
      "33      65000.0\n",
      "15     125000.0\n",
      "316     80000.0\n",
      "57     140000.0\n",
      "         ...   \n",
      "94      75000.0\n",
      "196     90000.0\n",
      "313     60000.0\n",
      "294    140000.0\n",
      "349    110000.0\n",
      "Name: Salary, Length: 75, dtype: float64\n"
     ]
    }
   ],
   "source": [
    "# Split the data into training and testing sets\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
    "print(X_train.shape)           #see all data shape (row, column), column needs to be same in train/test\n",
    "print(y_train.shape)\n",
    "print(X_test.shape)\n",
    "print(y_test.shape)\n",
    "print(X_test) #these data will be used to test the model\n",
    "print(y_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4c6ac730-5c3e-4164-911b-90904ea044ab",
   "metadata": {},
   "source": [
    "### Step 4: Fit model and predict outcomes [Code]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "dbc1e0c9-e629-4323-b089-5cc63996909f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean Absolute Error (MAE) Percentage: 2.9649953277761525 %\n",
      "Root Mean Squared Error (RMSE): 5125.353941231619\n",
      "R-squared (R2): 98.85807020857116 %\n"
     ]
    }
   ],
   "source": [
    "# Define the Random Forest model\n",
    "rf = RandomForestRegressor()\n",
    "\n",
    "#train model with training dataset\n",
    "rf.fit(X_train, y_train)\n",
    "\n",
    "#test using train data (to find overfitting)\n",
    "y_pred_train = rf.predict(X_train)\n",
    "y_pred = rf.predict(X_test)\n",
    "\n",
    "# Calculate Mean Absolute Error\n",
    "mae = mean_absolute_error(y_train, y_pred_train)\n",
    "\n",
    "# Calculate MAE as a percentage of the mean actual value\n",
    "mae_percentage = (mae / y_test.mean()) * 100\n",
    "print(\"Mean Absolute Error (MAE) Percentage:\", mae_percentage, \"%\")\n",
    "\n",
    "#find rmse of train model\n",
    "mse = mean_squared_error(y_train, y_pred_train)\n",
    "rmse = mse ** 0.5\n",
    "print(\"Root Mean Squared Error (RMSE):\", rmse)\n",
    "\n",
    "# Calculate R-squared\n",
    "r2 = r2_score(y_train, y_pred_train)\n",
    "print(\"R-squared (R2):\", r2 * 100, \"%\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "92581e9a-8210-4767-aa51-69abe5c57194",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "               Feature  Importance\n",
      "0                  Age    0.580598\n",
      "4  Years of Experience    0.262954\n",
      "3            Job Title    0.124858\n",
      "2      Education Level    0.027842\n",
      "1               Gender    0.003747\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1200x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Assuming 'X' is original DataFrame\n",
    "feature_names = X.columns  # Store the column names before splitting\n",
    "\n",
    "# Get feature importances from RandomForest model\n",
    "importances = rf.feature_importances_\n",
    "\n",
    "# Sort feature importances in descending order\n",
    "indices = np.argsort(importances)[::-1]\n",
    "\n",
    "# Create a DataFrame for easy plotting\n",
    "features = X.columns\n",
    "importance_df = pd.DataFrame({\n",
    "    'Feature': features,\n",
    "    'Importance': importances\n",
    "}).sort_values(by='Importance', ascending=False)\n",
    "\n",
    "print(importance_df)\n",
    "\n",
    "# Plot feature importances\n",
    "plt.figure(figsize=(12, 6))\n",
    "plt.title(\"Feature Importances\")\n",
    "plt.bar(range(X_train.shape[1]), importances[indices], align=\"center\")\n",
    "plt.xticks(range(X_train.shape[1]), feature_names[indices])\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "630a6406-eea4-4100-8c40-a125bf4b44bf",
   "metadata": {},
   "source": [
    "#### perform fine-tuning"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3f48a70c-4277-42c2-b545-bbf2f97bbbb6",
   "metadata": {},
   "source": [
    "##### Search the best cv value"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "7754b6bf-26e0-4b82-9e94-76290ee80413",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CV=2: Mean Score=-360575383.3658\n",
      "CV=3: Mean Score=-369723207.1029\n",
      "CV=4: Mean Score=-327421594.2132\n",
      "CV=5: Mean Score=-261648005.6129\n",
      "CV=6: Mean Score=-229993592.4674\n",
      "CV=7: Mean Score=-202910825.0604\n",
      "CV=8: Mean Score=-227609643.2935\n",
      "CV=9: Mean Score=-244535778.8229\n",
      "CV=10: Mean Score=-192116263.4471\n",
      "CV=11: Mean Score=-180774020.3084\n",
      "CV=12: Mean Score=-181304512.1587\n",
      "CV=13: Mean Score=-164297704.9300\n",
      "CV=14: Mean Score=-152902556.2361\n",
      "CV=15: Mean Score=-176387531.7916\n",
      "CV=16: Mean Score=-184820320.4204\n",
      "CV=17: Mean Score=-173913337.4139\n",
      "CV=18: Mean Score=-171888627.0942\n",
      "CV=19: Mean Score=-150741566.0893\n",
      "Best `cv` value: 19 with Mean Score: -150741566.0893\n"
     ]
    }
   ],
   "source": [
    "# List of possible `cv` values to test\n",
    "cv_values = list(range(2, 20, 1))  \n",
    "\n",
    "# Store the average scores for each `cv` value\n",
    "cv_scores = {}\n",
    "\n",
    "# Loop through each `cv` value to test\n",
    "for cv in cv_values:\n",
    "    # Perform cross-validation\n",
    "    scores = cross_val_score(rf, X, y, cv=cv, scoring='neg_mean_squared_error')\n",
    "    \n",
    "    # Calculate the mean score (use negative MSE because cross_val_score minimizes loss)\n",
    "    mean_score = np.mean(scores)\n",
    "    \n",
    "    # Store the average score for this `cv` value\n",
    "    cv_scores[cv] = mean_score\n",
    "    print(f'CV={cv}: Mean Score={mean_score:.4f}')\n",
    "\n",
    "# Find the `cv` with the best score\n",
    "best_cv = max(cv_scores, key=cv_scores.get)\n",
    "print(f'Best `cv` value: {best_cv} with Mean Score: {cv_scores[best_cv]:.4f}')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0b297992-bed4-401a-a71e-de347e6794f4",
   "metadata": {},
   "source": [
    "##### After using cv value for training data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "6e921e70-1d52-42fa-8df5-83311d955568",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Random sample of results:\n",
      "Actual: 40000.0 | Predicted: 29778.5\n",
      "Actual: 55000.0 | Predicted: 72550.0\n",
      "Actual: 60000.0 | Predicted: 83900.0\n",
      "Actual: 85000.0 | Predicted: 83400.0\n",
      "Actual: 40000.0 | Predicted: 40000.0\n",
      "Actual: 130000.0 | Predicted: 100250.0\n",
      "Actual: 40000.0 | Predicted: 29778.5\n",
      "Actual: 90000.0 | Predicted: 89550.0\n",
      "Actual: 180000.0 | Predicted: 174250.0\n",
      "Actual: 110000.0 | Predicted: 107050.0\n",
      "Mean Absolute Error (MAE) Percentage: 2.9649953277761525 %\n",
      "Root Mean Squared Error (RMSE): 13346.675473443198\n",
      "R-squared (R2): 92.25648968930476 %\n"
     ]
    }
   ],
   "source": [
    "# Function to peek at 10 random results\n",
    "def peek_results(y_actual, y_pred, num=10):\n",
    "    print('Random sample of results:')\n",
    "    selected = np.random.randint(0, len(y_actual), num)\n",
    "    for i in selected:\n",
    "        print(f'Actual: {y_actual.iloc[i]} | Predicted: {y_pred[i]}')\n",
    "        \n",
    "# Generate cross-validated predictions using cross_val_predict\n",
    "y_pred_cv = cross_val_predict(rf, X_train, y_train, cv=14)\n",
    "\n",
    "# Peek at the results using the peek_results function\n",
    "peek_results(y_train, y_pred_cv)\n",
    "\n",
    "# Calculate MAE as a percentage of the mean actual value\n",
    "mae_percentage = (mae / y_test.mean()) * 100\n",
    "print(\"Mean Absolute Error (MAE) Percentage:\", mae_percentage, \"%\")\n",
    "\n",
    "# Evaluate the model using Mean Squared Error and Root Mean Squared Error\n",
    "mse = mean_squared_error(y_train, y_pred_cv)\n",
    "rmse = mse ** 0.5\n",
    "print(\"Root Mean Squared Error (RMSE):\", rmse)\n",
    "\n",
    "# Calculate R-squared\n",
    "r2 = r2_score(y_train, y_pred_cv)\n",
    "print(\"R-squared (R2):\", r2 * 100, \"%\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "36052ef0-63e9-4769-9631-7a4ce8fb9270",
   "metadata": {},
   "source": [
    "##### Search the best random state"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "0816fffd-687b-460c-9517-3a04042226bb",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best random_state: 41 with MAE: 2742.03\n",
      "Best random_state: 60 with RMSE: 4392.906190206057\n",
      "Best random_state: 60 with R-squared: 99.17%\n"
     ]
    }
   ],
   "source": [
    "# Suppress FutureWarnings\n",
    "warnings.filterwarnings(\"ignore\", category=FutureWarning)\n",
    "\n",
    "# Set the range of random states to test\n",
    "random_states = range(1, 101)  # Example range from 1 to 100\n",
    "\n",
    "# Store RMSE results for each random state\n",
    "rmse_results = []\n",
    "r2_results = []\n",
    "mae_results = []\n",
    "adjusted_r2_results = []\n",
    "mape_results = []\n",
    "medae_results = []\n",
    "\n",
    "for state in random_states:\n",
    "    # Split the data with the current random state\n",
    "    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=state)\n",
    "\n",
    "    # Initialize and train the model\n",
    "    rf = RandomForestRegressor(\n",
    "        random_state=state\n",
    "    )\n",
    "    rf.fit(X_train, y_train)\n",
    "\n",
    "    # Predict on the test set\n",
    "    y_pred_train = rf.predict(X_train)\n",
    "    \n",
    "    # Calculate MAE for the current random state\n",
    "    mae = mean_absolute_error(y_train, y_pred_train)\n",
    "    mae_results.append((state, mae))\n",
    "\n",
    "    # Calculate RMSE for the current random state\n",
    "    rmse = mean_squared_error(y_train, y_pred_train, squared=False)\n",
    "    rmse_results.append((state, rmse))\n",
    "\n",
    "    # Calculate R² for the current random state\n",
    "    r2 = r2_score(y_train, y_pred_train)\n",
    "    r2_results.append((state, r2))\n",
    "\n",
    "# Find the random state with the lowest MAE\n",
    "best_state = min(mae_results, key=lambda x: x[1])\n",
    "print(f\"Best random_state: {best_state[0]} with MAE: {best_state[1]:.2f}\")\n",
    "\n",
    "# Find the random state with the lowest RMSE\n",
    "best_state = min(rmse_results, key=lambda x: x[1])\n",
    "print(f\"Best random_state: {best_state[0]} with RMSE: {best_state[1]}\")\n",
    "\n",
    "# Find the random state with the highest R-squared\n",
    "best_state = max(r2_results, key=lambda x: x[1])\n",
    "print(f\"Best random_state: {best_state[0]} with R-squared: {best_state[1] * 100:.2f}%\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b7fca4e3-9b50-4f9e-b0e5-509a47de4d53",
   "metadata": {},
   "source": [
    "##### Search the best parameter grid"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "7a4aeae1-3d20-469d-9b98-662103099d2a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Performing grid search...Fitting 14 folds for each of 6840 candidates, totalling 95760 fits\n",
      "done\n",
      "Best parameters found: {'max_depth': 10, 'max_features': 1, 'min_samples_leaf': 1, 'min_samples_split': 2, 'n_estimators': 400}\n"
     ]
    }
   ],
   "source": [
    "# Define the parameter grid\n",
    "param_grid = {\n",
    "    'n_estimators': list(range(100, 500, 100)),  # Number of trees\n",
    "    'min_samples_split': [2, 5, 10],  # Minimum samples to split a node\n",
    "    'min_samples_leaf': [1, 2, 4],    # Minimum samples at a leaf node\n",
    "    'max_depth': [None] + list(range(10, 100, 5)),  # Depth of trees\n",
    "    'max_features': list(range(1, 50, 5)),  # Range from 1 to 50 with increment of 5\n",
    "}\n",
    "\n",
    "# param_grid = {\n",
    "#     'n_estimators': [400],  # Number of trees\n",
    "#     'min_samples_split': [2],  # Minimum samples to split a node\n",
    "#     'min_samples_leaf': [1],    # Minimum samples at a leaf node\n",
    "#     'max_depth': [10],  # Depth of trees\n",
    "#     'max_features': [1],  # Range from 1 to 50 with increment of 5\n",
    "# }\n",
    "\n",
    "# Initialize the RandomForestRegressor\n",
    "rf = RandomForestRegressor(random_state=60)\n",
    "\n",
    "# Initialize GridSearchCV\n",
    "grid_search = GridSearchCV(rf, param_grid, cv=14, scoring='neg_mean_squared_error', verbose=2, n_jobs=-1)\n",
    "\n",
    "# Perform the grid search\n",
    "print('Performing grid search...', end='')\n",
    "grid_search.fit(X_train, y_train)\n",
    "print('done')\n",
    "\n",
    "# Output the best parameters\n",
    "best_params = grid_search.best_params_\n",
    "print(\"Best parameters found:\", best_params)\n",
    "\n",
    "# Retrain the model using the best parameters\n",
    "best_forest_model = RandomForestRegressor(**best_params, random_state=13)\n",
    "best_forest_model.fit(X_train, y_train)\n",
    "\n",
    "# Predict on the test set using the tuned model\n",
    "y_pred_best = best_forest_model.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "65c5126d-b9ee-4da8-8ade-e6559dd9cd3b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "R-squared of the best model: 98.72409498492793 %\n"
     ]
    }
   ],
   "source": [
    "# Predict on the test set using the best model from GridSearchCV\n",
    "y_pred_best = best_forest_model.predict(X_train)\n",
    "\n",
    "# Calculate R-squared (R²) for the best model\n",
    "r2_best = r2_score(y_train, y_pred_best)\n",
    "print(\"R-squared of the best model:\", r2_best * 100, \"%\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b6e1421f-b919-467d-9a66-8dbdc38462d0",
   "metadata": {},
   "source": [
    "### Step 5: Evaluate the model [Code]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "84177e79-505f-4b9f-b4f1-6d3cd85fcf9b",
   "metadata": {},
   "source": [
    "#### show prediction for test result before fine-tune"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "ca5a1503-8d75-4203-afa3-d7f74515ae92",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean Absolute Error (MAE) Percentage: 50.87223066666666 %\n",
      "Root Mean Squared Error (RMSE): 63263.234901870135\n",
      "R-squared (R2): -83.2526048648901 %\n"
     ]
    }
   ],
   "source": [
    "# Calculate Mean Absolute Error\n",
    "mae = mean_absolute_error(y_test, y_pred)\n",
    "\n",
    "# Calculate MAE as a percentage of the mean actual value\n",
    "mae_percentage = (mae / y_test.mean()) * 100\n",
    "print(\"Mean Absolute Error (MAE) Percentage:\", mae_percentage, \"%\")\n",
    "\n",
    "# Evaluate the model using Mean Squared Error and Root Mean Squared Error\n",
    "mse = mean_squared_error(y_test, y_pred)\n",
    "rmse = mse ** 0.5\n",
    "print(\"Root Mean Squared Error (RMSE):\", rmse)\n",
    "\n",
    "# Calculate R-squared\n",
    "r2 = r2_score(y_test, y_pred)\n",
    "print(\"R-squared (R2):\", r2 * 100, \"%\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "31e379e8-6d3f-4b79-81cc-84fa8b022d2f",
   "metadata": {},
   "source": [
    "#### after fine-tune"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "dce96424-cf3d-46ed-a7b3-6c8670f20cc8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean Absolute Error (MAE) Percentage: 6.697962898915797 %\n",
      "Root Mean Squared Error (RMSE): 10122.741429633526\n",
      "R-squared (R2): 95.30815503428485 %\n"
     ]
    }
   ],
   "source": [
    "# Predict the target on the testing set\n",
    "y_pred_test = best_forest_model.predict(X_test)\n",
    "\n",
    "# Calculate Mean Absolute Error\n",
    "mae = mean_absolute_error(y_test, y_pred_test)\n",
    "\n",
    "# Calculate MAE as a percentage of the mean actual value\n",
    "mae_percentage = (mae / y_test.mean()) * 100\n",
    "print(\"Mean Absolute Error (MAE) Percentage:\", mae_percentage, \"%\")\n",
    "\n",
    "# Evaluate the model using Mean Squared Error and Root Mean Squared Error\n",
    "mse = mean_squared_error(y_test, y_pred_test)\n",
    "rmse = mse ** 0.5\n",
    "print(\"Root Mean Squared Error (RMSE):\", rmse)\n",
    "\n",
    "# Calculate R-squared\n",
    "r2 = r2_score(y_test, y_pred_test)\n",
    "print(\"R-squared (R2):\", r2 * 100, \"%\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "81a2b759-6e79-4a3a-a89f-f353e049d679",
   "metadata": {},
   "source": [
    "#### Comparison"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "c0d15598-93ad-413b-8054-dceb36cc0097",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                        Metric  Before Fine-Tuning  After Fine-Tuning\n",
      "     Mean Absolute Error (MAE)        50872.230667        6697.962899\n",
      "                MAE Percentage           50.872231           6.697963\n",
      "Root Mean Squared Error (RMSE)        63263.234902       10122.741430\n",
      "                R-squared (R2)          -83.252605          95.308155\n"
     ]
    }
   ],
   "source": [
    "# Results before fine-tuning\n",
    "mae_before = mean_absolute_error(y_test, y_pred)\n",
    "mae_percentage_before = (mae_before / y_test.mean()) * 100\n",
    "mse_before = mean_squared_error(y_test, y_pred)\n",
    "rmse_before = mse_before ** 0.5\n",
    "r2_before = r2_score(y_test, y_pred) * 100\n",
    "\n",
    "# Results after fine-tuning\n",
    "mae_after_rf = mean_absolute_error(y_test, y_pred_test)\n",
    "mae_percentage_after_rf = (mae_after_rf / y_test.mean()) * 100\n",
    "mse_after_rf = mean_squared_error(y_test, y_pred_test)\n",
    "rmse_after_rf = mse_after_rf ** 0.5\n",
    "r2_after_rf = r2_score(y_test, y_pred_test) * 100\n",
    "\n",
    "# Create a DataFrame to display the results\n",
    "results = pd.DataFrame({\n",
    "    'Metric': ['Mean Absolute Error (MAE)', 'MAE Percentage', 'Root Mean Squared Error (RMSE)', 'R-squared (R2)'],\n",
    "    'Before Fine-Tuning': [mae_before, mae_percentage_before, rmse_before, r2_before],\n",
    "    'After Fine-Tuning': [mae_after_rf, mae_percentage_after_rf, rmse_after_rf, r2_after_rf]\n",
    "})\n",
    "\n",
    "# Display the DataFrame\n",
    "print(results.to_string(index=False))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "38c7490e-b1c0-4565-ac35-2e79f0ad54c4",
   "metadata": {},
   "source": [
    "### Step 6: Predict unseen data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "c5eceef6-e1d3-4dd4-883a-ad1c3a62dd33",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Predicted salary for unseen data: 60087.34\n"
     ]
    }
   ],
   "source": [
    "# Sample test data\n",
    "\n",
    "test_data = {\n",
    "    'Age': [28],  # Age values\n",
    "    'Gender': ['Female'],  # Gender values\n",
    "    'Education Level': ['Master\\'s'],  # Education levels\n",
    "    'Job Title': ['Data Analyst'],  # Job titles\n",
    "    'Years of Experience': [3]  # Years of experience\n",
    "}\n",
    "\n",
    "# Convert to DataFrame\n",
    "test_df = pd.DataFrame(test_data)\n",
    "\n",
    "# Preprocess unseen data\n",
    "for column, le in label_encoders.items():\n",
    "    if column in test_df.columns:\n",
    "        test_df[column] = le.transform(test_df[column])\n",
    "        # print(test_df[column])\n",
    "\n",
    "for column, scaler in scaler_columns.items():\n",
    "    # Ensure the column exists in the unseen data\n",
    "    if column in test_df.columns:\n",
    "        # Apply the scaler and update the column\n",
    "        test_df[[column]] = scaler.transform(test_df[[column]])\n",
    "        # print(test_df[column])\n",
    "\n",
    "# Ensure all columns are present and in the correct order\n",
    "test_df = test_df[X.columns]\n",
    "\n",
    "# Predict the salary_in_usd for new unseen data\n",
    "predicted_salary = best_forest_model.predict(test_df)\n",
    "\n",
    "print(f\"Predicted salary for unseen data: {predicted_salary[0]:.2f}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7f299bc8-352e-4bab-a730-c5a64ed228f5",
   "metadata": {},
   "source": [
    "### Step 7 Store the model in Joblib"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "3cb932a2-0f70-45ed-9ff1-887d7d17f180",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['best_forest_model.joblib']"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dump(best_forest_model, 'best_forest_model.joblib')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "076c881a-d01d-4404-bcc8-fdd65266f81a",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Load the model\n",
    "# test_best_forest_model = load('best_forest_model.joblib')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "aa56f434-b5f0-4bac-a2a0-c246c4748e80",
   "metadata": {},
   "outputs": [],
   "source": [
    "# # Sample user input\n",
    "# age = float(input(\"Enter Age: \"))\n",
    "# gender = input(\"Enter Gender (Male/Female): \")\n",
    "# education_level = input(\"Enter Education Level (e.g., Bachelor's, Master's, etc.): \")\n",
    "# job_title = input(\"Enter Job Title (e.g., Data Scientist, Data Engineer, etc.): \")\n",
    "# years_of_experience = float(input(\"Enter Years of Experience: \"))\n",
    "\n",
    "# # Create a dictionary to represent the user input\n",
    "# entered_data = {\n",
    "#     'Age': [age],\n",
    "#     'Gender': [gender],\n",
    "#     'Education Level': [education_level],\n",
    "#     'Job Title': [job_title],\n",
    "#     'Years of Experience': [years_of_experience]\n",
    "# }\n",
    "\n",
    "# test_entered_data = pd.DataFrame(entered_data)\n",
    "\n",
    "# test_label_encoders = {}\n",
    "\n",
    "# for column in test_entered_data.select_dtypes(include=['object']).columns:\n",
    "#     le = LabelEncoder()\n",
    "#     test_entered_data[column] = le.fit_transform(test_entered_data[column])\n",
    "#     test_label_encoders[column] = le\n",
    "\n",
    "# # Initialize StandardScaler for numerical features\n",
    "# test_scaler = StandardScaler()\n",
    "\n",
    "# # Scale numerical variables\n",
    "# for column in test_entered_data.select_dtypes(include=['float64']).columns:\n",
    "#     test_entered_data[column] = scaler.fit_transform(test_entered_data[[column]])\n",
    "\n",
    "\n",
    "# # Assuming 'rf' is your trained RandomForestRegressor model\n",
    "# test_y_pred_test = test_best_forest_model.predict(test_entered_data)\n",
    "# print(\"\\nPredicted Salary:\", round(test_y_pred_test[0], 2))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3a76920e-e106-4ccc-b3d5-fd3b7ed39a74",
   "metadata": {},
   "source": [
    "## Decision Tree"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "13339463-44b8-448a-be3b-26d788e4eea7",
   "metadata": {},
   "source": [
    "### Step 2 & 3 : Feature Extraction and Split the data (into training and testing set)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "ed4cb0ea-697c-4f08-8c7b-b6d8ef995622",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(298, 5)\n",
      "(298,)\n",
      "(75, 5)\n",
      "(75,)\n"
     ]
    }
   ],
   "source": [
    "# Split the data into training and testing sets\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
    "print(X_train.shape)           #see all data shape (row, column), column needs to be same in train/test\n",
    "print(y_train.shape)\n",
    "print(X_test.shape)\n",
    "print(y_test.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3b9103b5-aa1d-4cf7-a926-6a744235bc9b",
   "metadata": {},
   "source": [
    "### Step 4: Fit model and predict outcomes [Code]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bbdfae75-b3c9-488f-a9d2-9181b67a3dee",
   "metadata": {},
   "source": [
    "#### Get feature importances"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "8cb2466f-7463-4f4f-a97d-418922a30574",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "               Feature  Importance\n",
      "0                  Age    0.721930\n",
      "4  Years of Experience    0.170569\n",
      "3            Job Title    0.073636\n",
      "2      Education Level    0.030962\n",
      "1               Gender    0.002903\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Define the Decision Tree model\n",
    "decisiontree = DecisionTreeRegressor(random_state=42)\n",
    "\n",
    "# Fit the model\n",
    "decisiontree.fit(X_train, y_train)\n",
    "\n",
    "# Get feature importances\n",
    "importances = decisiontree.feature_importances_\n",
    "\n",
    "# Create a DataFrame for easy plotting\n",
    "features = X.columns\n",
    "importance_df = pd.DataFrame({\n",
    "    'Feature': features,\n",
    "    'Importance': importances\n",
    "}).sort_values(by='Importance', ascending=False)\n",
    "\n",
    "print(importance_df)\n",
    "\n",
    "plt.figure(figsize=(10,6))\n",
    "plt.barh(features, importances)\n",
    "plt.xlabel(\"Importance\")\n",
    "plt.title(\"Feature Importance for Decision Tree\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "12c6dea0-58a7-4b98-88ee-e5ddb148de38",
   "metadata": {},
   "source": [
    "#### Train Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "85e37c77-c13e-4acf-9580-c8002048e23b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Root Mean Squared Error (RMSE): 1419.3193022992375\n",
      "R-squared (R2): 99.91243069602965 %\n"
     ]
    }
   ],
   "source": [
    "# Define the Decision Tree model\n",
    "decisiontree = DecisionTreeRegressor(random_state=42)\n",
    "\n",
    "#train model with training dataset\n",
    "decisiontree.fit(X_train, y_train)\n",
    "\n",
    "#test using train data (to find overfitting)\n",
    "y_pred_train_tree = decisiontree.predict(X_train)\n",
    "\n",
    "#find rmse of train model\n",
    "mse = mean_squared_error(y_train, y_pred_train_tree)\n",
    "rmse = mse ** 0.5\n",
    "print(\"Root Mean Squared Error (RMSE):\", rmse)\n",
    "\n",
    "# Calculate R-squared\n",
    "r2 = r2_score(y_train, y_pred_train_tree)\n",
    "print(\"R-squared (R2):\", r2 * 100, \"%\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1f0d851a-9975-4bbc-b45b-1847d2606209",
   "metadata": {},
   "source": [
    "#### Show Random Prediction Result"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "2fa06b67-6699-464d-a4c8-83a518dafd40",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Random sample of results:\n",
      "Actual: 70000.0 | Predicted: 60000.0\n",
      "Actual: 40000.0 | Predicted: 45000.0\n",
      "Actual: 50000.0 | Predicted: 55000.0\n",
      "Actual: 40000.0 | Predicted: 40000.0\n",
      "Actual: 170000.0 | Predicted: 170000.0\n",
      "Actual: 80000.0 | Predicted: 85000.0\n",
      "Actual: 150000.0 | Predicted: 150000.0\n",
      "Actual: 45000.0 | Predicted: 55000.0\n",
      "Actual: 160000.0 | Predicted: 160000.0\n",
      "Actual: 95000.0 | Predicted: 90000.0\n"
     ]
    }
   ],
   "source": [
    "# Function to peek at 10 random results\n",
    "def peek_results(y_actual, y_pred, num=10):\n",
    "    print('Random sample of results:')\n",
    "    selected = np.random.randint(0, len(y_actual), num)\n",
    "    for i in selected:\n",
    "        print(f'Actual: {y_actual.iloc[i]} | Predicted: {y_pred[i]}')\n",
    "\n",
    "# Generate cross-validated predictions using cross_val_predict\n",
    "y_pred_cv_tree = cross_val_predict(decisiontree, X_train, y_train, cv=5)\n",
    "\n",
    "# Peek at the results using the peek_results function\n",
    "peek_results(y_train, y_pred_cv_tree)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a931ee39-f392-4a87-b97b-ed2b4fc8402f",
   "metadata": {},
   "source": [
    "#### Perform Fine-Tuning"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "ec225d81-312c-4a0c-9450-0e49a211b775",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Performing grid search... Please wait.\n",
      "Fitting 5 folds for each of 3240 candidates, totalling 16200 fits\n",
      "\n",
      "Grid Search Complete!\n",
      "Best parameters found: {'criterion': 'squared_error', 'max_depth': None, 'max_features': None, 'min_samples_leaf': 1, 'min_samples_split': 10, 'min_weight_fraction_leaf': 0.0}\n",
      "\n",
      "RMSE of the best model from Grid Search: 16246.5327\n",
      "Best Model Training R-squared: 96.61%\n"
     ]
    }
   ],
   "source": [
    "# Perform parameter grid\n",
    "param_grid = {\n",
    "    'max_depth': [None] + list(range(5, 30, 5)),          # Depth of the tree (None for no limit or a range of values)\n",
    "    'min_samples_split': list(range(2, 20, 2)),              # Minimum number of samples to split a node\n",
    "    'min_samples_leaf': list(range(1, 10, 2)),                  # Minimum number of samples required in a leaf\n",
    "    'criterion': ['squared_error', 'absolute_error'],             # Criterion for measuring the quality of a split\n",
    "    'max_features': [None, 'sqrt', 'log2'],                       # Number of features to consider when looking for the best split\n",
    "    'min_weight_fraction_leaf': [0.0, 0.01]          # Fraction of the total weight of samples required to be at a leaf node\n",
    "}\n",
    "\n",
    "# param_grid = {\n",
    "#     'max_depth': [None],          # Depth of the tree (None for no limit or a range of values)\n",
    "#     'min_samples_split': [10],              # Minimum number of samples to split a node\n",
    "#     'min_samples_leaf': [1],                  # Minimum number of samples required in a leaf\n",
    "#     'criterion': ['squared_error'],             # Criterion for measuring the quality of a split\n",
    "#     'max_features': [None],                       # Number of features to consider when looking for the best split\n",
    "#     'min_weight_fraction_leaf': [0.0]\n",
    "# }\n",
    "\n",
    "# Initialize GridSearchCV with DecisionTreeRegressor\n",
    "grid_search = GridSearchCV(DecisionTreeRegressor(random_state=42), param_grid,\n",
    "                           cv=5, scoring='neg_mean_squared_error', verbose=1, n_jobs=-1)\n",
    "\n",
    "# Perform the grid search\n",
    "print(\"Performing grid search... Please wait.\")\n",
    "grid_search.fit(X_train, y_train)\n",
    "\n",
    "# Check if any parameters were tuned\n",
    "if grid_search.best_params_:\n",
    "    print(\"\\nGrid Search Complete!\")\n",
    "    print(f\"Best parameters found: {grid_search.best_params_}\")\n",
    "else:\n",
    "    print(\"\\nNo hyperparameters were tuned. Using default parameters.\")\n",
    "\n",
    "# Output RMSE of the best model\n",
    "best_rmse = np.sqrt(-grid_search.best_score_)\n",
    "print(f\"\\nRMSE of the best model from Grid Search: {best_rmse:.4f}\")\n",
    "\n",
    "# Use the best model found by GridSearchCV\n",
    "best_tree_model = grid_search.best_estimator_\n",
    "\n",
    "# Predict on the training set using the best model\n",
    "y_pred_train = best_tree_model.predict(X_train)\n",
    "\n",
    "# Calculate R-squared (R²) for the best model on the training set\n",
    "r2_best_train = r2_score(y_train, y_pred_train)\n",
    "\n",
    "# Display the R-squared score\n",
    "print(f\"Best Model Training R-squared: {r2_best_train * 100:.2f}%\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8402e316-9b51-46f3-89bc-54cdc5e05676",
   "metadata": {},
   "source": [
    "### Step 5: Evaluate the model [Code]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1b21b054-edf7-4ab3-bfa0-e9594665c898",
   "metadata": {},
   "source": [
    "#### using fine-tuned model to predict test data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "83d7ac87-21cb-4111-8d6f-14b374d37c6e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model Evaluation Results on Test Set:\n",
      "----------------------------------------\n",
      "Root Mean Squared Error (RMSE): 14471.9172\n",
      "R-squared: 91.26%\n",
      "----------------------------------------\n"
     ]
    }
   ],
   "source": [
    "# Predict the target on the testing set\n",
    "y_pred_test = best_tree_model.predict(X_test)\n",
    "\n",
    "# Evaluate the model using Mean Squared Error and Root Mean Squared Error\n",
    "mse = mean_squared_error(y_test, y_pred_test)\n",
    "rmse = mse ** 0.5\n",
    "\n",
    "# Calculate R-squared\n",
    "r2 = r2_score(y_test, y_pred_test)\n",
    "print(f\"Model Evaluation Results on Test Set:\")\n",
    "print(f\"{'-'*40}\")\n",
    "print(f\"Root Mean Squared Error (RMSE): {rmse:.4f}\")\n",
    "print(f\"R-squared: {r2 * 100:.2f}%\")\n",
    "print(f\"{'-'*40}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "id": "3509bd96-8f87-4d8d-9ea4-8185d5e572d4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                        Metric  Before Fine-Tuning  After Fine-Tuning\n",
      "     Mean Absolute Error (MAE)         8489.564000        9993.412698\n",
      "                MAE Percentage            8.285196           9.752843\n",
      "Root Mean Squared Error (RMSE)        11943.870824       14471.917234\n",
      "                R-squared (R2)           94.050004          91.264684\n"
     ]
    }
   ],
   "source": [
    "# Results before fine-tuning\n",
    "mae_before = mean_absolute_error(y_test, y_pred)\n",
    "mae_percentage_before = (mae_before / y_test.mean()) * 100\n",
    "mse_before = mean_squared_error(y_test, y_pred)\n",
    "rmse_before = mse_before ** 0.5\n",
    "r2_before = r2_score(y_test, y_pred) * 100\n",
    "\n",
    "# Results after fine-tuning\n",
    "mae_after_dt = mean_absolute_error(y_test, y_pred_test)\n",
    "mae_percentage_after_dt = (mae_after_dt / y_test.mean()) * 100\n",
    "mse_after_dt = mean_squared_error(y_test, y_pred_test)\n",
    "rmse_after_dt = mse_after_dt ** 0.5\n",
    "r2_after_dt = r2_score(y_test, y_pred_test) * 100\n",
    "\n",
    "# Create a DataFrame to display the results\n",
    "results = pd.DataFrame({\n",
    "    'Metric': ['Mean Absolute Error (MAE)', 'MAE Percentage', 'Root Mean Squared Error (RMSE)', 'R-squared (R2)'],\n",
    "    'Before Fine-Tuning': [mae_before, mae_percentage_before, rmse_before, r2_before],\n",
    "    'After Fine-Tuning': [mae_after_dt, mae_percentage_after_dt, rmse_after_dt, r2_after_dt]\n",
    "})\n",
    "\n",
    "# Display the DataFrame\n",
    "print(results.to_string(index=False))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2d73170e-6469-4518-bf84-aeac4aa2e934",
   "metadata": {},
   "source": [
    "### Step 6: Predict unseen data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "id": "8e3eff7f-d906-474c-98fe-70d00236f345",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Preprocessing unseen data for prediction...\n",
      "\n",
      "Encoded Gender: Female -> 0\n",
      "Encoded Education Level: Bachelor's -> 0\n",
      "Encoded Job Title: Data Analyst -> 17\n",
      "Standardized Age: -1.7609569840409987\n",
      "Standardized Years of Experience: -1.3791293769321766\n",
      "\n",
      "Prediction complete!\n",
      "Predicted Salary for the test data: $38,125.00\n"
     ]
    }
   ],
   "source": [
    "# Sample test data\n",
    "test_data = {\n",
    "    'Age': [25],                            # Age values\n",
    "    'Gender': ['Female'],                   # Gender values\n",
    "    'Education Level': [\"Bachelor's\"],      # Education levels\n",
    "    'Job Title': ['Data Analyst'],          # Job titles\n",
    "    'Years of Experience': [1]              # Years of experience\n",
    "}\n",
    "\n",
    "# Convert to DataFrame\n",
    "test_df = pd.DataFrame(test_data)\n",
    "\n",
    "# Preprocess unseen data\n",
    "print(\"Preprocessing unseen data for prediction...\\n\")\n",
    "\n",
    "# Label encode categorical variables\n",
    "for column, le in label_encoders.items():\n",
    "    if column in test_df.columns:\n",
    "        test_df[column] = le.transform(test_df[column])\n",
    "        print(f\"Encoded {column}: {test_data[column][0]} -> {test_df[column][0]}\")\n",
    "\n",
    "# Standardize numerical variables\n",
    "for column, scaler in scaler_columns.items():\n",
    "    if column in test_df.columns:\n",
    "        test_df[[column]] = scaler.transform(test_df[[column]])\n",
    "        print(f\"Standardized {column}: {test_df[column][0]}\")\n",
    "\n",
    "# Ensure all columns are present and in the correct order\n",
    "test_df = test_df[X.columns]\n",
    "\n",
    "# Predict the salary for the unseen data\n",
    "predicted_salary = best_tree_model.predict(test_df)\n",
    "\n",
    "# Display the prediction result\n",
    "print(\"\\nPrediction complete!\")\n",
    "print(f\"Predicted Salary for the test data: ${predicted_salary[0]:,.2f}\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f7d0ff10-028a-453f-9e31-adca76cf2bd4",
   "metadata": {},
   "source": [
    "### Step 7 Store the model in Joblib"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "id": "921f42dd-e6f6-4250-8652-3ef77cdb953a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['decision_tree_model.joblib']"
      ]
     },
     "execution_count": 66,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dump(best_tree_model, 'decision_tree_model.joblib')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "id": "e730d457-44b6-460c-9654-c0b7205bc692",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Load the model\n",
    "# test_best_tree_model = load('decision_tree_model.joblib')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "id": "cd7e74b0-a24d-4a77-91c3-efec4ba678cb",
   "metadata": {},
   "outputs": [],
   "source": [
    "# # Sample user input\n",
    "# age = float(input(\"Enter Age: \"))\n",
    "# gender = input(\"Enter Gender (Male/Female): \")\n",
    "# education_level = input(\"Enter Education Level (e.g., Bachelor's, Master's, etc.): \")\n",
    "# job_title = input(\"Enter Job Title (e.g., Data Scientist, Data Engineer, etc.): \")\n",
    "# years_of_experience = float(input(\"Enter Years of Experience: \"))\n",
    "\n",
    "# # Create a dictionary to represent the user input\n",
    "# entered_data = {\n",
    "#     'Age': [age],\n",
    "#     'Gender': [gender],\n",
    "#     'Education Level': [education_level],\n",
    "#     'Job Title': [job_title],\n",
    "#     'Years of Experience': [years_of_experience]\n",
    "# }\n",
    "\n",
    "# test_entered_data = pd.DataFrame(entered_data)\n",
    "\n",
    "# test_label_encoders = {}\n",
    "\n",
    "# for column in test_entered_data.select_dtypes(include=['object']).columns:\n",
    "#     le = LabelEncoder()\n",
    "#     test_entered_data[column] = le.fit_transform(test_entered_data[column])\n",
    "#     test_label_encoders[column] = le\n",
    "\n",
    "# # Initialize StandardScaler for numerical features\n",
    "# test_scaler = StandardScaler()\n",
    "\n",
    "# # Scale numerical variables\n",
    "# for column in test_entered_data.select_dtypes(include=['float64']).columns:\n",
    "#     test_entered_data[column] = scaler.fit_transform(test_entered_data[[column]])\n",
    "\n",
    "\n",
    "# test_y_pred_test = test_best_tree_model.predict(test_entered_data)\n",
    "# print(\"\\nPredicted Salary:\", round(test_y_pred_test[0], 2))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "26ee5ef5-1089-409a-a19b-f51af697433d",
   "metadata": {},
   "source": [
    "## KNN"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1e47a088-b3be-407c-9897-f6cd61c14e99",
   "metadata": {},
   "source": [
    "### Step 2 & 3 : Feature Extraction and Split the data (into training and testing set)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "id": "528c5961-1455-40c6-b42e-f2c5dbc21137",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Splitting the Data\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3182899a-7fbb-44ce-b939-513aa5f91899",
   "metadata": {},
   "source": [
    "### Step 4: Fit model and predict outcomes [Code]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "be3f5033-71ba-49ed-937c-93090c801546",
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'KNeighborsRegressor' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[4], line 2\u001b[0m\n\u001b[0;32m      1\u001b[0m \u001b[38;5;66;03m# Initialize and train the KNN model with default parameters\u001b[39;00m\n\u001b[1;32m----> 2\u001b[0m knn_default \u001b[38;5;241m=\u001b[39m KNeighborsRegressor()\n\u001b[0;32m      3\u001b[0m knn_default\u001b[38;5;241m.\u001b[39mfit(X_train, y_train)\n",
      "\u001b[1;31mNameError\u001b[0m: name 'KNeighborsRegressor' is not defined"
     ]
    }
   ],
   "source": [
    "# Initialize and train the KNN model with default parameters\n",
    "knn_default = KNeighborsRegressor()\n",
    "knn_default.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "id": "92e1fc78-6c7e-492a-8192-9ca4340a0506",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Predict on the test set\n",
    "y_pred_default = knn_default.predict(X_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cca23ffd-8c68-440c-b659-62bc403bfb1d",
   "metadata": {},
   "source": [
    "#### Predict data example"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "id": "927cf433-aa51-4e09-8d37-f9435ed5fd05",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Predicted Salary for new data using the default model: 38125.00\n"
     ]
    }
   ],
   "source": [
    "# Predict on a new data example\n",
    "new_data = pd.DataFrame([[28, 'Female', \"Master's\", 3, 'Data Analyst']],\n",
    "                        columns=['Age', 'Gender', 'Education Level', 'Years of Experience', 'Job Title'])\n",
    "\n",
    "# Preprocess unseen data\n",
    "for column, le in label_encoders.items():\n",
    "    if column in new_data.columns:\n",
    "        new_data[column] = le.transform(new_data[column])\n",
    "        # print(new_data[column])\n",
    "\n",
    "for column, scaler in scaler_columns.items():\n",
    "    # Ensure the column exists in the unseen data\n",
    "    if column in new_data.columns:\n",
    "        # Apply the scaler and update the column\n",
    "        new_data[[column]] = scaler.transform(new_data[[column]])\n",
    "        # print(new_data[column])\n",
    "\n",
    "# Ensure all columns are present and in the correct order\n",
    "new_data = new_data[X.columns]\n",
    "\n",
    "# Predict using the default model\n",
    "predicted_salary_default = knn_default.predict(new_data)\n",
    "print(f\"Predicted Salary for new data using the default model: {predicted_salary[0]:.2f}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fbb4b752-a5de-4efd-a063-c09a8a85577f",
   "metadata": {},
   "source": [
    "#### Fine-Tuning"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "id": "db332f74-8f69-4af3-ad98-636c68598762",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best Parameters: {'metric': 'manhattan', 'n_neighbors': 3, 'weights': 'distance'}\n"
     ]
    }
   ],
   "source": [
    "# 2. Fine-Tune the KNN Model Using GridSearchCV\n",
    "# Define the parameter grid\n",
    "param_grid = {\n",
    "    'n_neighbors': [3, 5, 7, 9, 11, 13],  # Different values of n_neighbors to test\n",
    "    'weights': ['uniform', 'distance'],   # Use uniform or distance-based weights\n",
    "    'metric': ['euclidean', 'manhattan']  # Different distance metrics\n",
    "}\n",
    "\n",
    "# Initialize GridSearchCV\n",
    "grid_search = GridSearchCV(KNeighborsRegressor(), param_grid, cv=5, scoring='r2')\n",
    "\n",
    "# Perform the grid search\n",
    "grid_search.fit(X_train, y_train)\n",
    "\n",
    "# Output the best parameters\n",
    "best_params = grid_search.best_params_\n",
    "print(f\"Best Parameters: {best_params}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3726dea4-ab0b-4573-8e6c-ca7834370cfb",
   "metadata": {},
   "source": [
    "### Step 5: Evaluate the model [Code]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "52b358d1-c8db-4873-bdbc-d38c659147f4",
   "metadata": {},
   "source": [
    "#### Evaluate model before fine-tuning"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "id": "76d325a2-1d66-4456-aa61-35affbc2d23a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Before Fine-Tuning:\n",
      "Default Model R-squared: 71.87595379419267%\n",
      "Default Model Mean Absolute Error: 15840.933333333332\n",
      "Default Model Mean Squared Error: 674297132.0\n"
     ]
    }
   ],
   "source": [
    "# Evaluate the model before fine-tuning\n",
    "r2_default = r2_score(y_test, y_pred_default) * 100\n",
    "mae_default = mean_absolute_error(y_test, y_pred_default)\n",
    "mse_default = mean_squared_error(y_test, y_pred_default)\n",
    "\n",
    "print(\"Before Fine-Tuning:\")\n",
    "print(f\"Default Model R-squared: {r2_default}%\")\n",
    "print(f\"Default Model Mean Absolute Error: {mae_default}\")\n",
    "print(f\"Default Model Mean Squared Error: {mse_default}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "abb0ec72-ec3f-4a48-99ae-85b897118f04",
   "metadata": {},
   "source": [
    "#### after fine-tune"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "id": "50d5ec93-523b-40e9-9858-062707596444",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best Model R-squared: 86.26066585157726%\n",
      "Best Model Mean Absolute Error: 11685.925622232546\n",
      "Best Model Mean Squared Error: 329411832.99429053\n"
     ]
    }
   ],
   "source": [
    "# Predict on the test set using the best model from GridSearchCV\n",
    "best_model = grid_search.best_estimator_\n",
    "y_pred_test = best_model.predict(X_test)\n",
    "\n",
    "# Calculate R-squared (R²) for the best model\n",
    "r2_best = r2_score(y_test, y_pred_test) * 100\n",
    "mae_best = mean_absolute_error(y_test, y_pred_test)\n",
    "mse_best = mean_squared_error(y_test, y_pred_test)\n",
    "\n",
    "print(f\"Best Model R-squared: {r2_best}%\")\n",
    "print(f\"Best Model Mean Absolute Error: {mae_best}\")\n",
    "print(f\"Best Model Mean Squared Error: {mse_best}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "79e38148-b60d-4c2c-882b-f437017ad6fc",
   "metadata": {},
   "source": [
    "#### Comparison"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "id": "e250ae33-c024-418d-9f31-17b2db9039d2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                        Metric  Before Fine-Tuning  After Fine-Tuning\n",
      "     Mean Absolute Error (MAE)         8489.564000       11685.925622\n",
      "                MAE Percentage            8.285196          11.404612\n",
      "Root Mean Squared Error (RMSE)        11943.870824       18149.706141\n",
      "                R-squared (R2)           94.050004          86.260666\n"
     ]
    }
   ],
   "source": [
    "# Results before fine-tuning\n",
    "mae_before = mean_absolute_error(y_test, y_pred)\n",
    "mae_percentage_before = (mae_before / y_test.mean()) * 100\n",
    "mse_before = mean_squared_error(y_test, y_pred)\n",
    "rmse_before = mse_before ** 0.5\n",
    "r2_before = r2_score(y_test, y_pred) * 100\n",
    "\n",
    "# Results after fine-tuning\n",
    "mae_after_knn = mean_absolute_error(y_test, y_pred_test)\n",
    "mae_percentage_after_knn = (mae_after_knn / y_test.mean()) * 100\n",
    "mse_after_knn = mean_squared_error(y_test, y_pred_test)\n",
    "rmse_after_knn = mse_after_knn ** 0.5\n",
    "r2_after_knn = r2_score(y_test, y_pred_test) * 100\n",
    "\n",
    "# Create a DataFrame to display the results\n",
    "results = pd.DataFrame({\n",
    "    'Metric': ['Mean Absolute Error (MAE)', 'MAE Percentage', 'Root Mean Squared Error (RMSE)', 'R-squared (R2)'],\n",
    "    'Before Fine-Tuning': [mae_before, mae_percentage_before, rmse_before, r2_before],\n",
    "    'After Fine-Tuning': [mae_after_knn, mae_percentage_after_knn, rmse_after_knn, r2_after_knn]\n",
    "})\n",
    "\n",
    "# Display the DataFrame\n",
    "print(results.to_string(index=False))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f0e0659b-83c0-42f3-a550-9c05f16e153e",
   "metadata": {},
   "source": [
    "### Step 6: Predict unseen data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "id": "659f57a1-4972-45d8-ae61-a31cece8e1e0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Predicted salary for unseen data: 65000.00\n"
     ]
    }
   ],
   "source": [
    "# Sample test data\n",
    "\n",
    "test_data = {\n",
    "    'Age': [28],  # Age values\n",
    "    'Gender': ['Female'],  # Gender values\n",
    "    'Education Level': ['Master\\'s'],  # Education levels\n",
    "    'Job Title': ['Data Analyst'],  # Job titles\n",
    "    'Years of Experience': [3]  # Years of experience\n",
    "}\n",
    "\n",
    "# Convert to DataFrame\n",
    "test_df = pd.DataFrame(test_data)\n",
    "\n",
    "# Preprocess unseen data\n",
    "for column, le in label_encoders.items():\n",
    "    if column in test_df.columns:\n",
    "        test_df[column] = le.transform(test_df[column])\n",
    "        # print(test_df[column])\n",
    "\n",
    "for column, scaler in scaler_columns.items():\n",
    "    # Ensure the column exists in the unseen data\n",
    "    if column in test_df.columns:\n",
    "        # Apply the scaler and update the column\n",
    "        test_df[[column]] = scaler.transform(test_df[[column]])\n",
    "        # print(test_df[column])\n",
    "\n",
    "# Ensure all columns are present and in the correct order\n",
    "test_df = test_df[X.columns]\n",
    "\n",
    "# Predict the salary_in_usd for new unseen data\n",
    "predicted_salary = best_model.predict(test_df)\n",
    "\n",
    "print(f\"Predicted salary for unseen data: {predicted_salary[0]:.2f}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "432d7c06-d666-44cd-b326-9c001bf7f641",
   "metadata": {},
   "source": [
    "### Step 7 Store the model in Joblib"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "id": "d5f01beb-fb2e-463d-bc8a-bffd377c5af8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['knn.joblib']"
      ]
     },
     "execution_count": 89,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dump(best_model, 'knn.joblib')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "id": "047499db-9cf7-4f95-a4d1-c10e60710e3f",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Load the model\n",
    "# test_best_model = load('knn.joblib')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "id": "70054066-8941-450a-8c7d-5c1d058feb23",
   "metadata": {},
   "outputs": [],
   "source": [
    "# # Sample user input\n",
    "# age = float(input(\"Enter Age: \"))\n",
    "# gender = input(\"Enter Gender (Male/Female): \")\n",
    "# education_level = input(\"Enter Education Level (e.g., Bachelor's, Master's, etc.): \")\n",
    "# job_title = input(\"Enter Job Title (e.g., Data Scientist, Data Engineer, etc.): \")\n",
    "# years_of_experience = float(input(\"Enter Years of Experience: \"))\n",
    "\n",
    "# # Create a dictionary to represent the user input\n",
    "# entered_data = {\n",
    "#     'Age': [age],\n",
    "#     'Gender': [gender],\n",
    "#     'Education Level': [education_level],\n",
    "#     'Job Title': [job_title],\n",
    "#     'Years of Experience': [years_of_experience]\n",
    "# }\n",
    "\n",
    "# test_entered_data = pd.DataFrame(entered_data)\n",
    "\n",
    "# test_label_encoders = {}\n",
    "\n",
    "# for column in test_entered_data.select_dtypes(include=['object']).columns:\n",
    "#     le = LabelEncoder()\n",
    "#     test_entered_data[column] = le.fit_transform(test_entered_data[column])\n",
    "#     test_label_encoders[column] = le\n",
    "\n",
    "# # Initialize StandardScaler for numerical features\n",
    "# test_scaler = StandardScaler()\n",
    "\n",
    "# # Scale numerical variables\n",
    "# for column in test_entered_data.select_dtypes(include=['float64']).columns:\n",
    "#     test_entered_data[column] = scaler.fit_transform(test_entered_data[[column]])\n",
    "\n",
    "\n",
    "# test_y_pred_test = best_model.predict(test_entered_data)\n",
    "# print(\"\\nPredicted Salary:\", round(test_y_pred_test[0], 2))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "623ae9a7-6fbc-4e9f-92e0-faec91338348",
   "metadata": {},
   "source": [
    "## Analysis the result between 3 model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "id": "0034ca56-63a4-4671-900b-3d963c46ae84",
   "metadata": {},
   "outputs": [],
   "source": [
    "models = {\n",
    "    'Random Forest': best_forest_model,\n",
    "    'Decision Tree': best_tree_model,\n",
    "    'KNN': best_model\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "id": "5979c84f-0ae5-4aee-9d07-4c55fbbe36c9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "        Model  R-Mean Absolute Error (MAE)  MAE Percentage  Root Mean Squared Error (RMSE)  R-squared (R2)\n",
      "Random Forest                  6697.962899        6.697963                    10122.741430       95.308155\n",
      "Decision Tree                  9993.412698        9.752843                    14471.917234       91.264684\n",
      "          KNN                 11685.925622       11.404612                    18149.706141       86.260666\n"
     ]
    }
   ],
   "source": [
    "results = {'Model': [], 'R-Mean Absolute Error (MAE)': [], 'MAE Percentage': [], 'Root Mean Squared Error (RMSE)': [], 'R-squared (R2)': []}\n",
    "\n",
    "for i in models:\n",
    "    obj = models[i]\n",
    "    obj.fit(X_train, y_train)\n",
    "    obj_pred = obj.predict(X_test)\n",
    "\n",
    "    results = pd.DataFrame({\n",
    "        'Model': ['Random Forest', 'Decision Tree', 'KNN'],\n",
    "        'R-Mean Absolute Error (MAE)': [mae_after_rf, mae_after_dt, mae_after_knn],\n",
    "        'MAE Percentage': [mae_percentage_after_rf, mae_percentage_after_dt, mae_percentage_after_knn],\n",
    "        'Root Mean Squared Error (RMSE)': [rmse_after_rf, rmse_after_dt, rmse_after_knn],\n",
    "        'R-squared (R2)': [r2_after_rf, r2_after_dt, r2_after_knn]\n",
    "    })\n",
    "\n",
    "# Create a DataFrame from the results dictionary\n",
    "results_df = pd.DataFrame(results)\n",
    "\n",
    "# Display the DataFrame without row numbering (index)\n",
    "print(results_df.to_string(index=False))"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
